// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	context "context"

	config "github.com/tbe-team/raybot/internal/config"

	mock "github.com/stretchr/testify/mock"
)

// FakeService is an autogenerated mock type for the Service type
type FakeService struct {
	mock.Mock
}

type FakeService_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeService) EXPECT() *FakeService_Expecter {
	return &FakeService_Expecter{mock: &_m.Mock}
}

// GetBatteryMonitoringConfig provides a mock function with given fields: ctx
func (_m *FakeService) GetBatteryMonitoringConfig(ctx context.Context) (config.BatteryMonitoring, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetBatteryMonitoringConfig")
	}

	var r0 config.BatteryMonitoring
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (config.BatteryMonitoring, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) config.BatteryMonitoring); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(config.BatteryMonitoring)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeService_GetBatteryMonitoringConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBatteryMonitoringConfig'
type FakeService_GetBatteryMonitoringConfig_Call struct {
	*mock.Call
}

// GetBatteryMonitoringConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeService_Expecter) GetBatteryMonitoringConfig(ctx interface{}) *FakeService_GetBatteryMonitoringConfig_Call {
	return &FakeService_GetBatteryMonitoringConfig_Call{Call: _e.mock.On("GetBatteryMonitoringConfig", ctx)}
}

func (_c *FakeService_GetBatteryMonitoringConfig_Call) Run(run func(ctx context.Context)) *FakeService_GetBatteryMonitoringConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeService_GetBatteryMonitoringConfig_Call) Return(_a0 config.BatteryMonitoring, _a1 error) *FakeService_GetBatteryMonitoringConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeService_GetBatteryMonitoringConfig_Call) RunAndReturn(run func(context.Context) (config.BatteryMonitoring, error)) *FakeService_GetBatteryMonitoringConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetCloudConfig provides a mock function with given fields: ctx
func (_m *FakeService) GetCloudConfig(ctx context.Context) (config.Cloud, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCloudConfig")
	}

	var r0 config.Cloud
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (config.Cloud, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) config.Cloud); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(config.Cloud)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeService_GetCloudConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCloudConfig'
type FakeService_GetCloudConfig_Call struct {
	*mock.Call
}

// GetCloudConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeService_Expecter) GetCloudConfig(ctx interface{}) *FakeService_GetCloudConfig_Call {
	return &FakeService_GetCloudConfig_Call{Call: _e.mock.On("GetCloudConfig", ctx)}
}

func (_c *FakeService_GetCloudConfig_Call) Run(run func(ctx context.Context)) *FakeService_GetCloudConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeService_GetCloudConfig_Call) Return(_a0 config.Cloud, _a1 error) *FakeService_GetCloudConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeService_GetCloudConfig_Call) RunAndReturn(run func(context.Context) (config.Cloud, error)) *FakeService_GetCloudConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommandConfig provides a mock function with given fields: ctx
func (_m *FakeService) GetCommandConfig(ctx context.Context) (config.Command, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCommandConfig")
	}

	var r0 config.Command
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (config.Command, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) config.Command); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(config.Command)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeService_GetCommandConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommandConfig'
type FakeService_GetCommandConfig_Call struct {
	*mock.Call
}

// GetCommandConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeService_Expecter) GetCommandConfig(ctx interface{}) *FakeService_GetCommandConfig_Call {
	return &FakeService_GetCommandConfig_Call{Call: _e.mock.On("GetCommandConfig", ctx)}
}

func (_c *FakeService_GetCommandConfig_Call) Run(run func(ctx context.Context)) *FakeService_GetCommandConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeService_GetCommandConfig_Call) Return(_a0 config.Command, _a1 error) *FakeService_GetCommandConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeService_GetCommandConfig_Call) RunAndReturn(run func(context.Context) (config.Command, error)) *FakeService_GetCommandConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetHTTPConfig provides a mock function with given fields: ctx
func (_m *FakeService) GetHTTPConfig(ctx context.Context) (config.HTTP, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetHTTPConfig")
	}

	var r0 config.HTTP
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (config.HTTP, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) config.HTTP); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(config.HTTP)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeService_GetHTTPConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHTTPConfig'
type FakeService_GetHTTPConfig_Call struct {
	*mock.Call
}

// GetHTTPConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeService_Expecter) GetHTTPConfig(ctx interface{}) *FakeService_GetHTTPConfig_Call {
	return &FakeService_GetHTTPConfig_Call{Call: _e.mock.On("GetHTTPConfig", ctx)}
}

func (_c *FakeService_GetHTTPConfig_Call) Run(run func(ctx context.Context)) *FakeService_GetHTTPConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeService_GetHTTPConfig_Call) Return(_a0 config.HTTP, _a1 error) *FakeService_GetHTTPConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeService_GetHTTPConfig_Call) RunAndReturn(run func(context.Context) (config.HTTP, error)) *FakeService_GetHTTPConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetHardwareConfig provides a mock function with given fields: ctx
func (_m *FakeService) GetHardwareConfig(ctx context.Context) (config.Hardware, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetHardwareConfig")
	}

	var r0 config.Hardware
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (config.Hardware, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) config.Hardware); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(config.Hardware)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeService_GetHardwareConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHardwareConfig'
type FakeService_GetHardwareConfig_Call struct {
	*mock.Call
}

// GetHardwareConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeService_Expecter) GetHardwareConfig(ctx interface{}) *FakeService_GetHardwareConfig_Call {
	return &FakeService_GetHardwareConfig_Call{Call: _e.mock.On("GetHardwareConfig", ctx)}
}

func (_c *FakeService_GetHardwareConfig_Call) Run(run func(ctx context.Context)) *FakeService_GetHardwareConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeService_GetHardwareConfig_Call) Return(_a0 config.Hardware, _a1 error) *FakeService_GetHardwareConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeService_GetHardwareConfig_Call) RunAndReturn(run func(context.Context) (config.Hardware, error)) *FakeService_GetHardwareConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogConfig provides a mock function with given fields: ctx
func (_m *FakeService) GetLogConfig(ctx context.Context) (config.Log, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLogConfig")
	}

	var r0 config.Log
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (config.Log, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) config.Log); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(config.Log)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeService_GetLogConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogConfig'
type FakeService_GetLogConfig_Call struct {
	*mock.Call
}

// GetLogConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeService_Expecter) GetLogConfig(ctx interface{}) *FakeService_GetLogConfig_Call {
	return &FakeService_GetLogConfig_Call{Call: _e.mock.On("GetLogConfig", ctx)}
}

func (_c *FakeService_GetLogConfig_Call) Run(run func(ctx context.Context)) *FakeService_GetLogConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeService_GetLogConfig_Call) Return(_a0 config.Log, _a1 error) *FakeService_GetLogConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeService_GetLogConfig_Call) RunAndReturn(run func(context.Context) (config.Log, error)) *FakeService_GetLogConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetWifiConfig provides a mock function with given fields: ctx
func (_m *FakeService) GetWifiConfig(ctx context.Context) (config.Wifi, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetWifiConfig")
	}

	var r0 config.Wifi
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (config.Wifi, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) config.Wifi); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(config.Wifi)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeService_GetWifiConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWifiConfig'
type FakeService_GetWifiConfig_Call struct {
	*mock.Call
}

// GetWifiConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeService_Expecter) GetWifiConfig(ctx interface{}) *FakeService_GetWifiConfig_Call {
	return &FakeService_GetWifiConfig_Call{Call: _e.mock.On("GetWifiConfig", ctx)}
}

func (_c *FakeService_GetWifiConfig_Call) Run(run func(ctx context.Context)) *FakeService_GetWifiConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeService_GetWifiConfig_Call) Return(_a0 config.Wifi, _a1 error) *FakeService_GetWifiConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeService_GetWifiConfig_Call) RunAndReturn(run func(context.Context) (config.Wifi, error)) *FakeService_GetWifiConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBatteryMonitoringConfig provides a mock function with given fields: ctx, batteryMonitoringCfg
func (_m *FakeService) UpdateBatteryMonitoringConfig(ctx context.Context, batteryMonitoringCfg config.BatteryMonitoring) (config.BatteryMonitoring, error) {
	ret := _m.Called(ctx, batteryMonitoringCfg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBatteryMonitoringConfig")
	}

	var r0 config.BatteryMonitoring
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, config.BatteryMonitoring) (config.BatteryMonitoring, error)); ok {
		return rf(ctx, batteryMonitoringCfg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, config.BatteryMonitoring) config.BatteryMonitoring); ok {
		r0 = rf(ctx, batteryMonitoringCfg)
	} else {
		r0 = ret.Get(0).(config.BatteryMonitoring)
	}

	if rf, ok := ret.Get(1).(func(context.Context, config.BatteryMonitoring) error); ok {
		r1 = rf(ctx, batteryMonitoringCfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeService_UpdateBatteryMonitoringConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBatteryMonitoringConfig'
type FakeService_UpdateBatteryMonitoringConfig_Call struct {
	*mock.Call
}

// UpdateBatteryMonitoringConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - batteryMonitoringCfg config.BatteryMonitoring
func (_e *FakeService_Expecter) UpdateBatteryMonitoringConfig(ctx interface{}, batteryMonitoringCfg interface{}) *FakeService_UpdateBatteryMonitoringConfig_Call {
	return &FakeService_UpdateBatteryMonitoringConfig_Call{Call: _e.mock.On("UpdateBatteryMonitoringConfig", ctx, batteryMonitoringCfg)}
}

func (_c *FakeService_UpdateBatteryMonitoringConfig_Call) Run(run func(ctx context.Context, batteryMonitoringCfg config.BatteryMonitoring)) *FakeService_UpdateBatteryMonitoringConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(config.BatteryMonitoring))
	})
	return _c
}

func (_c *FakeService_UpdateBatteryMonitoringConfig_Call) Return(_a0 config.BatteryMonitoring, _a1 error) *FakeService_UpdateBatteryMonitoringConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeService_UpdateBatteryMonitoringConfig_Call) RunAndReturn(run func(context.Context, config.BatteryMonitoring) (config.BatteryMonitoring, error)) *FakeService_UpdateBatteryMonitoringConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCloudConfig provides a mock function with given fields: ctx, cloudCfg
func (_m *FakeService) UpdateCloudConfig(ctx context.Context, cloudCfg config.Cloud) (config.Cloud, error) {
	ret := _m.Called(ctx, cloudCfg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCloudConfig")
	}

	var r0 config.Cloud
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, config.Cloud) (config.Cloud, error)); ok {
		return rf(ctx, cloudCfg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, config.Cloud) config.Cloud); ok {
		r0 = rf(ctx, cloudCfg)
	} else {
		r0 = ret.Get(0).(config.Cloud)
	}

	if rf, ok := ret.Get(1).(func(context.Context, config.Cloud) error); ok {
		r1 = rf(ctx, cloudCfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeService_UpdateCloudConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCloudConfig'
type FakeService_UpdateCloudConfig_Call struct {
	*mock.Call
}

// UpdateCloudConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - cloudCfg config.Cloud
func (_e *FakeService_Expecter) UpdateCloudConfig(ctx interface{}, cloudCfg interface{}) *FakeService_UpdateCloudConfig_Call {
	return &FakeService_UpdateCloudConfig_Call{Call: _e.mock.On("UpdateCloudConfig", ctx, cloudCfg)}
}

func (_c *FakeService_UpdateCloudConfig_Call) Run(run func(ctx context.Context, cloudCfg config.Cloud)) *FakeService_UpdateCloudConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(config.Cloud))
	})
	return _c
}

func (_c *FakeService_UpdateCloudConfig_Call) Return(_a0 config.Cloud, _a1 error) *FakeService_UpdateCloudConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeService_UpdateCloudConfig_Call) RunAndReturn(run func(context.Context, config.Cloud) (config.Cloud, error)) *FakeService_UpdateCloudConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCommandConfig provides a mock function with given fields: ctx, commandCfg
func (_m *FakeService) UpdateCommandConfig(ctx context.Context, commandCfg config.Command) (config.Command, error) {
	ret := _m.Called(ctx, commandCfg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCommandConfig")
	}

	var r0 config.Command
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, config.Command) (config.Command, error)); ok {
		return rf(ctx, commandCfg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, config.Command) config.Command); ok {
		r0 = rf(ctx, commandCfg)
	} else {
		r0 = ret.Get(0).(config.Command)
	}

	if rf, ok := ret.Get(1).(func(context.Context, config.Command) error); ok {
		r1 = rf(ctx, commandCfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeService_UpdateCommandConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCommandConfig'
type FakeService_UpdateCommandConfig_Call struct {
	*mock.Call
}

// UpdateCommandConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - commandCfg config.Command
func (_e *FakeService_Expecter) UpdateCommandConfig(ctx interface{}, commandCfg interface{}) *FakeService_UpdateCommandConfig_Call {
	return &FakeService_UpdateCommandConfig_Call{Call: _e.mock.On("UpdateCommandConfig", ctx, commandCfg)}
}

func (_c *FakeService_UpdateCommandConfig_Call) Run(run func(ctx context.Context, commandCfg config.Command)) *FakeService_UpdateCommandConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(config.Command))
	})
	return _c
}

func (_c *FakeService_UpdateCommandConfig_Call) Return(_a0 config.Command, _a1 error) *FakeService_UpdateCommandConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeService_UpdateCommandConfig_Call) RunAndReturn(run func(context.Context, config.Command) (config.Command, error)) *FakeService_UpdateCommandConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateHTTPConfig provides a mock function with given fields: ctx, httpCfg
func (_m *FakeService) UpdateHTTPConfig(ctx context.Context, httpCfg config.HTTP) (config.HTTP, error) {
	ret := _m.Called(ctx, httpCfg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateHTTPConfig")
	}

	var r0 config.HTTP
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, config.HTTP) (config.HTTP, error)); ok {
		return rf(ctx, httpCfg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, config.HTTP) config.HTTP); ok {
		r0 = rf(ctx, httpCfg)
	} else {
		r0 = ret.Get(0).(config.HTTP)
	}

	if rf, ok := ret.Get(1).(func(context.Context, config.HTTP) error); ok {
		r1 = rf(ctx, httpCfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeService_UpdateHTTPConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateHTTPConfig'
type FakeService_UpdateHTTPConfig_Call struct {
	*mock.Call
}

// UpdateHTTPConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - httpCfg config.HTTP
func (_e *FakeService_Expecter) UpdateHTTPConfig(ctx interface{}, httpCfg interface{}) *FakeService_UpdateHTTPConfig_Call {
	return &FakeService_UpdateHTTPConfig_Call{Call: _e.mock.On("UpdateHTTPConfig", ctx, httpCfg)}
}

func (_c *FakeService_UpdateHTTPConfig_Call) Run(run func(ctx context.Context, httpCfg config.HTTP)) *FakeService_UpdateHTTPConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(config.HTTP))
	})
	return _c
}

func (_c *FakeService_UpdateHTTPConfig_Call) Return(_a0 config.HTTP, _a1 error) *FakeService_UpdateHTTPConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeService_UpdateHTTPConfig_Call) RunAndReturn(run func(context.Context, config.HTTP) (config.HTTP, error)) *FakeService_UpdateHTTPConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateHardwareConfig provides a mock function with given fields: ctx, hardwareCfg
func (_m *FakeService) UpdateHardwareConfig(ctx context.Context, hardwareCfg config.Hardware) (config.Hardware, error) {
	ret := _m.Called(ctx, hardwareCfg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateHardwareConfig")
	}

	var r0 config.Hardware
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, config.Hardware) (config.Hardware, error)); ok {
		return rf(ctx, hardwareCfg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, config.Hardware) config.Hardware); ok {
		r0 = rf(ctx, hardwareCfg)
	} else {
		r0 = ret.Get(0).(config.Hardware)
	}

	if rf, ok := ret.Get(1).(func(context.Context, config.Hardware) error); ok {
		r1 = rf(ctx, hardwareCfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeService_UpdateHardwareConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateHardwareConfig'
type FakeService_UpdateHardwareConfig_Call struct {
	*mock.Call
}

// UpdateHardwareConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - hardwareCfg config.Hardware
func (_e *FakeService_Expecter) UpdateHardwareConfig(ctx interface{}, hardwareCfg interface{}) *FakeService_UpdateHardwareConfig_Call {
	return &FakeService_UpdateHardwareConfig_Call{Call: _e.mock.On("UpdateHardwareConfig", ctx, hardwareCfg)}
}

func (_c *FakeService_UpdateHardwareConfig_Call) Run(run func(ctx context.Context, hardwareCfg config.Hardware)) *FakeService_UpdateHardwareConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(config.Hardware))
	})
	return _c
}

func (_c *FakeService_UpdateHardwareConfig_Call) Return(_a0 config.Hardware, _a1 error) *FakeService_UpdateHardwareConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeService_UpdateHardwareConfig_Call) RunAndReturn(run func(context.Context, config.Hardware) (config.Hardware, error)) *FakeService_UpdateHardwareConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLogConfig provides a mock function with given fields: ctx, logCfg
func (_m *FakeService) UpdateLogConfig(ctx context.Context, logCfg config.Log) (config.Log, error) {
	ret := _m.Called(ctx, logCfg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLogConfig")
	}

	var r0 config.Log
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, config.Log) (config.Log, error)); ok {
		return rf(ctx, logCfg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, config.Log) config.Log); ok {
		r0 = rf(ctx, logCfg)
	} else {
		r0 = ret.Get(0).(config.Log)
	}

	if rf, ok := ret.Get(1).(func(context.Context, config.Log) error); ok {
		r1 = rf(ctx, logCfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeService_UpdateLogConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLogConfig'
type FakeService_UpdateLogConfig_Call struct {
	*mock.Call
}

// UpdateLogConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - logCfg config.Log
func (_e *FakeService_Expecter) UpdateLogConfig(ctx interface{}, logCfg interface{}) *FakeService_UpdateLogConfig_Call {
	return &FakeService_UpdateLogConfig_Call{Call: _e.mock.On("UpdateLogConfig", ctx, logCfg)}
}

func (_c *FakeService_UpdateLogConfig_Call) Run(run func(ctx context.Context, logCfg config.Log)) *FakeService_UpdateLogConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(config.Log))
	})
	return _c
}

func (_c *FakeService_UpdateLogConfig_Call) Return(_a0 config.Log, _a1 error) *FakeService_UpdateLogConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeService_UpdateLogConfig_Call) RunAndReturn(run func(context.Context, config.Log) (config.Log, error)) *FakeService_UpdateLogConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWifiConfig provides a mock function with given fields: ctx, wifiCfg
func (_m *FakeService) UpdateWifiConfig(ctx context.Context, wifiCfg config.Wifi) (config.Wifi, error) {
	ret := _m.Called(ctx, wifiCfg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWifiConfig")
	}

	var r0 config.Wifi
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, config.Wifi) (config.Wifi, error)); ok {
		return rf(ctx, wifiCfg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, config.Wifi) config.Wifi); ok {
		r0 = rf(ctx, wifiCfg)
	} else {
		r0 = ret.Get(0).(config.Wifi)
	}

	if rf, ok := ret.Get(1).(func(context.Context, config.Wifi) error); ok {
		r1 = rf(ctx, wifiCfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeService_UpdateWifiConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWifiConfig'
type FakeService_UpdateWifiConfig_Call struct {
	*mock.Call
}

// UpdateWifiConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - wifiCfg config.Wifi
func (_e *FakeService_Expecter) UpdateWifiConfig(ctx interface{}, wifiCfg interface{}) *FakeService_UpdateWifiConfig_Call {
	return &FakeService_UpdateWifiConfig_Call{Call: _e.mock.On("UpdateWifiConfig", ctx, wifiCfg)}
}

func (_c *FakeService_UpdateWifiConfig_Call) Run(run func(ctx context.Context, wifiCfg config.Wifi)) *FakeService_UpdateWifiConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(config.Wifi))
	})
	return _c
}

func (_c *FakeService_UpdateWifiConfig_Call) Return(_a0 config.Wifi, _a1 error) *FakeService_UpdateWifiConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeService_UpdateWifiConfig_Call) RunAndReturn(run func(context.Context, config.Wifi) (config.Wifi, error)) *FakeService_UpdateWifiConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakeService creates a new instance of FakeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeService {
	mock := &FakeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
