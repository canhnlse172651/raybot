// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	liftmotor "github.com/tbe-team/raybot/internal/services/liftmotor"
)

// FakeService is an autogenerated mock type for the Service type
type FakeService struct {
	mock.Mock
}

type FakeService_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeService) EXPECT() *FakeService_Expecter {
	return &FakeService_Expecter{mock: &_m.Mock}
}

// GetLiftMotorState provides a mock function with given fields: ctx
func (_m *FakeService) GetLiftMotorState(ctx context.Context) (liftmotor.LiftMotorState, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLiftMotorState")
	}

	var r0 liftmotor.LiftMotorState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (liftmotor.LiftMotorState, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) liftmotor.LiftMotorState); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(liftmotor.LiftMotorState)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeService_GetLiftMotorState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLiftMotorState'
type FakeService_GetLiftMotorState_Call struct {
	*mock.Call
}

// GetLiftMotorState is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeService_Expecter) GetLiftMotorState(ctx interface{}) *FakeService_GetLiftMotorState_Call {
	return &FakeService_GetLiftMotorState_Call{Call: _e.mock.On("GetLiftMotorState", ctx)}
}

func (_c *FakeService_GetLiftMotorState_Call) Run(run func(ctx context.Context)) *FakeService_GetLiftMotorState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeService_GetLiftMotorState_Call) Return(_a0 liftmotor.LiftMotorState, _a1 error) *FakeService_GetLiftMotorState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeService_GetLiftMotorState_Call) RunAndReturn(run func(context.Context) (liftmotor.LiftMotorState, error)) *FakeService_GetLiftMotorState_Call {
	_c.Call.Return(run)
	return _c
}

// SetCargoPosition provides a mock function with given fields: ctx, params
func (_m *FakeService) SetCargoPosition(ctx context.Context, params liftmotor.SetCargoPositionParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for SetCargoPosition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, liftmotor.SetCargoPositionParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeService_SetCargoPosition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCargoPosition'
type FakeService_SetCargoPosition_Call struct {
	*mock.Call
}

// SetCargoPosition is a helper method to define mock.On call
//   - ctx context.Context
//   - params liftmotor.SetCargoPositionParams
func (_e *FakeService_Expecter) SetCargoPosition(ctx interface{}, params interface{}) *FakeService_SetCargoPosition_Call {
	return &FakeService_SetCargoPosition_Call{Call: _e.mock.On("SetCargoPosition", ctx, params)}
}

func (_c *FakeService_SetCargoPosition_Call) Run(run func(ctx context.Context, params liftmotor.SetCargoPositionParams)) *FakeService_SetCargoPosition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(liftmotor.SetCargoPositionParams))
	})
	return _c
}

func (_c *FakeService_SetCargoPosition_Call) Return(_a0 error) *FakeService_SetCargoPosition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeService_SetCargoPosition_Call) RunAndReturn(run func(context.Context, liftmotor.SetCargoPositionParams) error) *FakeService_SetCargoPosition_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: ctx
func (_m *FakeService) Stop(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeService_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type FakeService_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeService_Expecter) Stop(ctx interface{}) *FakeService_Stop_Call {
	return &FakeService_Stop_Call{Call: _e.mock.On("Stop", ctx)}
}

func (_c *FakeService_Stop_Call) Run(run func(ctx context.Context)) *FakeService_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeService_Stop_Call) Return(_a0 error) *FakeService_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeService_Stop_Call) RunAndReturn(run func(context.Context) error) *FakeService_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLiftMotorState provides a mock function with given fields: ctx, params
func (_m *FakeService) UpdateLiftMotorState(ctx context.Context, params liftmotor.UpdateLiftMotorStateParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLiftMotorState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, liftmotor.UpdateLiftMotorStateParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeService_UpdateLiftMotorState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLiftMotorState'
type FakeService_UpdateLiftMotorState_Call struct {
	*mock.Call
}

// UpdateLiftMotorState is a helper method to define mock.On call
//   - ctx context.Context
//   - params liftmotor.UpdateLiftMotorStateParams
func (_e *FakeService_Expecter) UpdateLiftMotorState(ctx interface{}, params interface{}) *FakeService_UpdateLiftMotorState_Call {
	return &FakeService_UpdateLiftMotorState_Call{Call: _e.mock.On("UpdateLiftMotorState", ctx, params)}
}

func (_c *FakeService_UpdateLiftMotorState_Call) Run(run func(ctx context.Context, params liftmotor.UpdateLiftMotorStateParams)) *FakeService_UpdateLiftMotorState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(liftmotor.UpdateLiftMotorStateParams))
	})
	return _c
}

func (_c *FakeService_UpdateLiftMotorState_Call) Return(_a0 error) *FakeService_UpdateLiftMotorState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeService_UpdateLiftMotorState_Call) RunAndReturn(run func(context.Context, liftmotor.UpdateLiftMotorStateParams) error) *FakeService_UpdateLiftMotorState_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakeService creates a new instance of FakeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeService {
	mock := &FakeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
