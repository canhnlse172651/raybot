// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	drivemotor "github.com/tbe-team/raybot/internal/services/drivemotor"
)

// FakeService is an autogenerated mock type for the Service type
type FakeService struct {
	mock.Mock
}

type FakeService_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeService) EXPECT() *FakeService_Expecter {
	return &FakeService_Expecter{mock: &_m.Mock}
}

// GetDriveMotorState provides a mock function with given fields: ctx
func (_m *FakeService) GetDriveMotorState(ctx context.Context) (drivemotor.DriveMotorState, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDriveMotorState")
	}

	var r0 drivemotor.DriveMotorState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (drivemotor.DriveMotorState, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) drivemotor.DriveMotorState); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(drivemotor.DriveMotorState)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeService_GetDriveMotorState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDriveMotorState'
type FakeService_GetDriveMotorState_Call struct {
	*mock.Call
}

// GetDriveMotorState is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeService_Expecter) GetDriveMotorState(ctx interface{}) *FakeService_GetDriveMotorState_Call {
	return &FakeService_GetDriveMotorState_Call{Call: _e.mock.On("GetDriveMotorState", ctx)}
}

func (_c *FakeService_GetDriveMotorState_Call) Run(run func(ctx context.Context)) *FakeService_GetDriveMotorState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeService_GetDriveMotorState_Call) Return(_a0 drivemotor.DriveMotorState, _a1 error) *FakeService_GetDriveMotorState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeService_GetDriveMotorState_Call) RunAndReturn(run func(context.Context) (drivemotor.DriveMotorState, error)) *FakeService_GetDriveMotorState_Call {
	_c.Call.Return(run)
	return _c
}

// MoveBackward provides a mock function with given fields: ctx, params
func (_m *FakeService) MoveBackward(ctx context.Context, params drivemotor.MoveBackwardParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for MoveBackward")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, drivemotor.MoveBackwardParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeService_MoveBackward_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MoveBackward'
type FakeService_MoveBackward_Call struct {
	*mock.Call
}

// MoveBackward is a helper method to define mock.On call
//   - ctx context.Context
//   - params drivemotor.MoveBackwardParams
func (_e *FakeService_Expecter) MoveBackward(ctx interface{}, params interface{}) *FakeService_MoveBackward_Call {
	return &FakeService_MoveBackward_Call{Call: _e.mock.On("MoveBackward", ctx, params)}
}

func (_c *FakeService_MoveBackward_Call) Run(run func(ctx context.Context, params drivemotor.MoveBackwardParams)) *FakeService_MoveBackward_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(drivemotor.MoveBackwardParams))
	})
	return _c
}

func (_c *FakeService_MoveBackward_Call) Return(_a0 error) *FakeService_MoveBackward_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeService_MoveBackward_Call) RunAndReturn(run func(context.Context, drivemotor.MoveBackwardParams) error) *FakeService_MoveBackward_Call {
	_c.Call.Return(run)
	return _c
}

// MoveForward provides a mock function with given fields: ctx, params
func (_m *FakeService) MoveForward(ctx context.Context, params drivemotor.MoveForwardParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for MoveForward")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, drivemotor.MoveForwardParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeService_MoveForward_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MoveForward'
type FakeService_MoveForward_Call struct {
	*mock.Call
}

// MoveForward is a helper method to define mock.On call
//   - ctx context.Context
//   - params drivemotor.MoveForwardParams
func (_e *FakeService_Expecter) MoveForward(ctx interface{}, params interface{}) *FakeService_MoveForward_Call {
	return &FakeService_MoveForward_Call{Call: _e.mock.On("MoveForward", ctx, params)}
}

func (_c *FakeService_MoveForward_Call) Run(run func(ctx context.Context, params drivemotor.MoveForwardParams)) *FakeService_MoveForward_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(drivemotor.MoveForwardParams))
	})
	return _c
}

func (_c *FakeService_MoveForward_Call) Return(_a0 error) *FakeService_MoveForward_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeService_MoveForward_Call) RunAndReturn(run func(context.Context, drivemotor.MoveForwardParams) error) *FakeService_MoveForward_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: ctx
func (_m *FakeService) Stop(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeService_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type FakeService_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeService_Expecter) Stop(ctx interface{}) *FakeService_Stop_Call {
	return &FakeService_Stop_Call{Call: _e.mock.On("Stop", ctx)}
}

func (_c *FakeService_Stop_Call) Run(run func(ctx context.Context)) *FakeService_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeService_Stop_Call) Return(_a0 error) *FakeService_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeService_Stop_Call) RunAndReturn(run func(context.Context) error) *FakeService_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDriveMotorState provides a mock function with given fields: ctx, params
func (_m *FakeService) UpdateDriveMotorState(ctx context.Context, params drivemotor.UpdateDriveMotorStateParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDriveMotorState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, drivemotor.UpdateDriveMotorStateParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeService_UpdateDriveMotorState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDriveMotorState'
type FakeService_UpdateDriveMotorState_Call struct {
	*mock.Call
}

// UpdateDriveMotorState is a helper method to define mock.On call
//   - ctx context.Context
//   - params drivemotor.UpdateDriveMotorStateParams
func (_e *FakeService_Expecter) UpdateDriveMotorState(ctx interface{}, params interface{}) *FakeService_UpdateDriveMotorState_Call {
	return &FakeService_UpdateDriveMotorState_Call{Call: _e.mock.On("UpdateDriveMotorState", ctx, params)}
}

func (_c *FakeService_UpdateDriveMotorState_Call) Run(run func(ctx context.Context, params drivemotor.UpdateDriveMotorStateParams)) *FakeService_UpdateDriveMotorState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(drivemotor.UpdateDriveMotorStateParams))
	})
	return _c
}

func (_c *FakeService_UpdateDriveMotorState_Call) Return(_a0 error) *FakeService_UpdateDriveMotorState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeService_UpdateDriveMotorState_Call) RunAndReturn(run func(context.Context, drivemotor.UpdateDriveMotorStateParams) error) *FakeService_UpdateDriveMotorState_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakeService creates a new instance of FakeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeService {
	mock := &FakeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
