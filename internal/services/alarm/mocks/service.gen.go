// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	context "context"

	alarm "github.com/tbe-team/raybot/internal/services/alarm"

	mock "github.com/stretchr/testify/mock"

	paging "github.com/tbe-team/raybot/pkg/paging"
)

// FakeService is an autogenerated mock type for the Service type
type FakeService struct {
	mock.Mock
}

type FakeService_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeService) EXPECT() *FakeService_Expecter {
	return &FakeService_Expecter{mock: &_m.Mock}
}

// DeleteDeactivatedAlarms provides a mock function with given fields: ctx
func (_m *FakeService) DeleteDeactivatedAlarms(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeactivatedAlarms")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeService_DeleteDeactivatedAlarms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDeactivatedAlarms'
type FakeService_DeleteDeactivatedAlarms_Call struct {
	*mock.Call
}

// DeleteDeactivatedAlarms is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeService_Expecter) DeleteDeactivatedAlarms(ctx interface{}) *FakeService_DeleteDeactivatedAlarms_Call {
	return &FakeService_DeleteDeactivatedAlarms_Call{Call: _e.mock.On("DeleteDeactivatedAlarms", ctx)}
}

func (_c *FakeService_DeleteDeactivatedAlarms_Call) Run(run func(ctx context.Context)) *FakeService_DeleteDeactivatedAlarms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeService_DeleteDeactivatedAlarms_Call) Return(_a0 error) *FakeService_DeleteDeactivatedAlarms_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeService_DeleteDeactivatedAlarms_Call) RunAndReturn(run func(context.Context) error) *FakeService_DeleteDeactivatedAlarms_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDeactivatedAlarmsByThreshold provides a mock function with given fields: ctx, params
func (_m *FakeService) DeleteDeactivatedAlarmsByThreshold(ctx context.Context, params alarm.DeleteDeactivatedAlarmsByThresholdParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeactivatedAlarmsByThreshold")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, alarm.DeleteDeactivatedAlarmsByThresholdParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeService_DeleteDeactivatedAlarmsByThreshold_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDeactivatedAlarmsByThreshold'
type FakeService_DeleteDeactivatedAlarmsByThreshold_Call struct {
	*mock.Call
}

// DeleteDeactivatedAlarmsByThreshold is a helper method to define mock.On call
//   - ctx context.Context
//   - params alarm.DeleteDeactivatedAlarmsByThresholdParams
func (_e *FakeService_Expecter) DeleteDeactivatedAlarmsByThreshold(ctx interface{}, params interface{}) *FakeService_DeleteDeactivatedAlarmsByThreshold_Call {
	return &FakeService_DeleteDeactivatedAlarmsByThreshold_Call{Call: _e.mock.On("DeleteDeactivatedAlarmsByThreshold", ctx, params)}
}

func (_c *FakeService_DeleteDeactivatedAlarmsByThreshold_Call) Run(run func(ctx context.Context, params alarm.DeleteDeactivatedAlarmsByThresholdParams)) *FakeService_DeleteDeactivatedAlarmsByThreshold_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(alarm.DeleteDeactivatedAlarmsByThresholdParams))
	})
	return _c
}

func (_c *FakeService_DeleteDeactivatedAlarmsByThreshold_Call) Return(_a0 error) *FakeService_DeleteDeactivatedAlarmsByThreshold_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeService_DeleteDeactivatedAlarmsByThreshold_Call) RunAndReturn(run func(context.Context, alarm.DeleteDeactivatedAlarmsByThresholdParams) error) *FakeService_DeleteDeactivatedAlarmsByThreshold_Call {
	_c.Call.Return(run)
	return _c
}

// ListActiveAlarms provides a mock function with given fields: ctx, params
func (_m *FakeService) ListActiveAlarms(ctx context.Context, params alarm.ListActiveAlarmsParams) (paging.List[alarm.Alarm], error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListActiveAlarms")
	}

	var r0 paging.List[alarm.Alarm]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, alarm.ListActiveAlarmsParams) (paging.List[alarm.Alarm], error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, alarm.ListActiveAlarmsParams) paging.List[alarm.Alarm]); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(paging.List[alarm.Alarm])
	}

	if rf, ok := ret.Get(1).(func(context.Context, alarm.ListActiveAlarmsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeService_ListActiveAlarms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListActiveAlarms'
type FakeService_ListActiveAlarms_Call struct {
	*mock.Call
}

// ListActiveAlarms is a helper method to define mock.On call
//   - ctx context.Context
//   - params alarm.ListActiveAlarmsParams
func (_e *FakeService_Expecter) ListActiveAlarms(ctx interface{}, params interface{}) *FakeService_ListActiveAlarms_Call {
	return &FakeService_ListActiveAlarms_Call{Call: _e.mock.On("ListActiveAlarms", ctx, params)}
}

func (_c *FakeService_ListActiveAlarms_Call) Run(run func(ctx context.Context, params alarm.ListActiveAlarmsParams)) *FakeService_ListActiveAlarms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(alarm.ListActiveAlarmsParams))
	})
	return _c
}

func (_c *FakeService_ListActiveAlarms_Call) Return(_a0 paging.List[alarm.Alarm], _a1 error) *FakeService_ListActiveAlarms_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeService_ListActiveAlarms_Call) RunAndReturn(run func(context.Context, alarm.ListActiveAlarmsParams) (paging.List[alarm.Alarm], error)) *FakeService_ListActiveAlarms_Call {
	_c.Call.Return(run)
	return _c
}

// ListDeactiveAlarms provides a mock function with given fields: ctx, params
func (_m *FakeService) ListDeactiveAlarms(ctx context.Context, params alarm.ListDeactiveAlarmsParams) (paging.List[alarm.Alarm], error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListDeactiveAlarms")
	}

	var r0 paging.List[alarm.Alarm]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, alarm.ListDeactiveAlarmsParams) (paging.List[alarm.Alarm], error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, alarm.ListDeactiveAlarmsParams) paging.List[alarm.Alarm]); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(paging.List[alarm.Alarm])
	}

	if rf, ok := ret.Get(1).(func(context.Context, alarm.ListDeactiveAlarmsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeService_ListDeactiveAlarms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDeactiveAlarms'
type FakeService_ListDeactiveAlarms_Call struct {
	*mock.Call
}

// ListDeactiveAlarms is a helper method to define mock.On call
//   - ctx context.Context
//   - params alarm.ListDeactiveAlarmsParams
func (_e *FakeService_Expecter) ListDeactiveAlarms(ctx interface{}, params interface{}) *FakeService_ListDeactiveAlarms_Call {
	return &FakeService_ListDeactiveAlarms_Call{Call: _e.mock.On("ListDeactiveAlarms", ctx, params)}
}

func (_c *FakeService_ListDeactiveAlarms_Call) Run(run func(ctx context.Context, params alarm.ListDeactiveAlarmsParams)) *FakeService_ListDeactiveAlarms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(alarm.ListDeactiveAlarmsParams))
	})
	return _c
}

func (_c *FakeService_ListDeactiveAlarms_Call) Return(_a0 paging.List[alarm.Alarm], _a1 error) *FakeService_ListDeactiveAlarms_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeService_ListDeactiveAlarms_Call) RunAndReturn(run func(context.Context, alarm.ListDeactiveAlarmsParams) (paging.List[alarm.Alarm], error)) *FakeService_ListDeactiveAlarms_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakeService creates a new instance of FakeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeService {
	mock := &FakeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
