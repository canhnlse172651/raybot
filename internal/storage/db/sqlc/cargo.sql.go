// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: cargo.sql

package sqlc

import (
	"context"
)

const cargoDoorMotorGet = `-- name: CargoDoorMotorGet :one
SELECT
	id, direction, speed, is_running, enabled, updated_at
FROM
	cargo_door_motor
WHERE
	id = 1
`

func (q *Queries) CargoDoorMotorGet(ctx context.Context, db DBTX) (CargoDoorMotor, error) {
	row := db.QueryRowContext(ctx, cargoDoorMotorGet)
	var i CargoDoorMotor
	err := row.Scan(
		&i.ID,
		&i.Direction,
		&i.Speed,
		&i.IsRunning,
		&i.Enabled,
		&i.UpdatedAt,
	)
	return i, err
}

const cargoDoorMotorUpdate = `-- name: CargoDoorMotorUpdate :one
UPDATE
	cargo_door_motor
SET
	direction = ?1,
	speed = ?2,
	is_running = ?3,
	enabled = ?4,
	updated_at = ?5
WHERE
	id = 1 RETURNING id, direction, speed, is_running, enabled, updated_at
`

type CargoDoorMotorUpdateParams struct {
	Direction int64  `json:"direction"`
	Speed     int64  `json:"speed"`
	IsRunning int64  `json:"is_running"`
	Enabled   int64  `json:"enabled"`
	UpdatedAt string `json:"updated_at"`
}

func (q *Queries) CargoDoorMotorUpdate(ctx context.Context, db DBTX, arg CargoDoorMotorUpdateParams) (CargoDoorMotor, error) {
	row := db.QueryRowContext(ctx, cargoDoorMotorUpdate,
		arg.Direction,
		arg.Speed,
		arg.IsRunning,
		arg.Enabled,
		arg.UpdatedAt,
	)
	var i CargoDoorMotor
	err := row.Scan(
		&i.ID,
		&i.Direction,
		&i.Speed,
		&i.IsRunning,
		&i.Enabled,
		&i.UpdatedAt,
	)
	return i, err
}

const cargoGet = `-- name: CargoGet :one
SELECT
	id, is_open, qr_code, bottom_distance, updated_at, has_item
FROM
	cargo
WHERE
	id = 1
`

func (q *Queries) CargoGet(ctx context.Context, db DBTX) (Cargo, error) {
	row := db.QueryRowContext(ctx, cargoGet)
	var i Cargo
	err := row.Scan(
		&i.ID,
		&i.IsOpen,
		&i.QrCode,
		&i.BottomDistance,
		&i.UpdatedAt,
		&i.HasItem,
	)
	return i, err
}

const cargoUpdateBottomDistance = `-- name: CargoUpdateBottomDistance :one
UPDATE
	cargo
SET
	bottom_distance = ?1,
	updated_at = ?2
WHERE
	id = 1 RETURNING id, is_open, qr_code, bottom_distance, updated_at, has_item
`

type CargoUpdateBottomDistanceParams struct {
	BottomDistance int64  `json:"bottom_distance"`
	UpdatedAt      string `json:"updated_at"`
}

func (q *Queries) CargoUpdateBottomDistance(ctx context.Context, db DBTX, arg CargoUpdateBottomDistanceParams) (Cargo, error) {
	row := db.QueryRowContext(ctx, cargoUpdateBottomDistance, arg.BottomDistance, arg.UpdatedAt)
	var i Cargo
	err := row.Scan(
		&i.ID,
		&i.IsOpen,
		&i.QrCode,
		&i.BottomDistance,
		&i.UpdatedAt,
		&i.HasItem,
	)
	return i, err
}

const cargoUpdateHasItem = `-- name: CargoUpdateHasItem :one
UPDATE
	cargo
SET
	has_item = ?1,
	updated_at = ?2
WHERE
	id = 1 RETURNING id, is_open, qr_code, bottom_distance, updated_at, has_item
`

type CargoUpdateHasItemParams struct {
	HasItem   int64  `json:"has_item"`
	UpdatedAt string `json:"updated_at"`
}

func (q *Queries) CargoUpdateHasItem(ctx context.Context, db DBTX, arg CargoUpdateHasItemParams) (Cargo, error) {
	row := db.QueryRowContext(ctx, cargoUpdateHasItem, arg.HasItem, arg.UpdatedAt)
	var i Cargo
	err := row.Scan(
		&i.ID,
		&i.IsOpen,
		&i.QrCode,
		&i.BottomDistance,
		&i.UpdatedAt,
		&i.HasItem,
	)
	return i, err
}

const cargoUpdateIsOpen = `-- name: CargoUpdateIsOpen :one
UPDATE
	cargo
SET
	is_open = ?1,
	updated_at = ?2
WHERE
	id = 1 RETURNING id, is_open, qr_code, bottom_distance, updated_at, has_item
`

type CargoUpdateIsOpenParams struct {
	IsOpen    int64  `json:"is_open"`
	UpdatedAt string `json:"updated_at"`
}

func (q *Queries) CargoUpdateIsOpen(ctx context.Context, db DBTX, arg CargoUpdateIsOpenParams) (Cargo, error) {
	row := db.QueryRowContext(ctx, cargoUpdateIsOpen, arg.IsOpen, arg.UpdatedAt)
	var i Cargo
	err := row.Scan(
		&i.ID,
		&i.IsOpen,
		&i.QrCode,
		&i.BottomDistance,
		&i.UpdatedAt,
		&i.HasItem,
	)
	return i, err
}

const cargoUpdateQRCode = `-- name: CargoUpdateQRCode :one
UPDATE
	cargo
SET
	qr_code = ?1,
	updated_at = ?2
WHERE
	id = 1 RETURNING id, is_open, qr_code, bottom_distance, updated_at, has_item
`

type CargoUpdateQRCodeParams struct {
	QrCode    string `json:"qr_code"`
	UpdatedAt string `json:"updated_at"`
}

func (q *Queries) CargoUpdateQRCode(ctx context.Context, db DBTX, arg CargoUpdateQRCodeParams) (Cargo, error) {
	row := db.QueryRowContext(ctx, cargoUpdateQRCode, arg.QrCode, arg.UpdatedAt)
	var i Cargo
	err := row.Scan(
		&i.ID,
		&i.IsOpen,
		&i.QrCode,
		&i.BottomDistance,
		&i.UpdatedAt,
		&i.HasItem,
	)
	return i, err
}
