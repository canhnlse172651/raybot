// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// APConfig defines model for APConfig.
type APConfig struct {
	// Enable Whether to enable the AP mode
	Enable bool `json:"enable"`

	// Ssid The SSID for the AP mode
	Ssid string `json:"ssid"`

	// Password The password for the AP mode
	Password string `json:"password"`

	// Ip The IP address for the AP mode
	Ip string `json:"ip"`
}

// AppConnection defines model for AppConnection.
type AppConnection struct {
	CloudConnection     CloudConnection     `json:"cloudConnection"`
	EspSerialConnection ESPSerialConnection `json:"espSerialConnection"`
	PicSerialConnection PICSerialConnection `json:"picSerialConnection"`
	RfidUsbConnection   RFIDUSBConnection   `json:"rfidUsbConnection"`
}

// BatteryState defines model for BatteryState.
type BatteryState struct {
	// Current The current of the battery
	Current uint16 `json:"current"`

	// Temp The temperature of the battery
	Temp uint8 `json:"temp"`

	// Voltage The voltage of the battery
	Voltage uint16 `json:"voltage"`

	// CellVoltages The cell voltages of the battery
	CellVoltages []uint16 `json:"cellVoltages"`

	// Percent The percentage of the battery
	Percent uint8 `json:"percent"`

	// Fault The fault of the battery
	Fault uint8 `json:"fault"`

	// Health The health of the battery
	Health uint8 `json:"health"`

	// UpdatedAt The updated at time of the battery
	UpdatedAt time.Time `json:"updatedAt"`
}

// BottomObstacleTracking defines model for BottomObstacleTracking.
type BottomObstacleTracking struct {
	// EnterDistance Start detecting obstacle when distance is below this value
	EnterDistance uint16 `json:"enterDistance"`

	// ExitDistance Stop detecting obstacle when distance is above this value
	ExitDistance uint16 `json:"exitDistance"`
}

// CargoCheckQRInputs defines model for CargoCheckQRInputs.
type CargoCheckQRInputs struct {
	// QrCode The QR code to check
	QrCode string `json:"qrCode"`
}

// CargoCheckQROutputs defines model for CargoCheckQROutputs.
type CargoCheckQROutputs = map[string]interface{}

// CargoCloseInputs defines model for CargoCloseInputs.
type CargoCloseInputs struct {
	// MotorSpeed The speed of the motor
	MotorSpeed MotorSpeed `json:"motorSpeed"`
}

// CargoCloseOutputs defines model for CargoCloseOutputs.
type CargoCloseOutputs = map[string]interface{}

// CargoDoorMotorState defines model for CargoDoorMotorState.
type CargoDoorMotorState struct {
	// Direction The direction of the cargo door motor
	Direction string `json:"direction"`

	// Speed The speed of the cargo door motor
	Speed uint8 `json:"speed"`

	// IsRunning Whether the cargo door motor is running
	IsRunning bool `json:"isRunning"`

	// Enabled Whether the cargo door motor is enabled
	Enabled bool `json:"enabled"`

	// UpdatedAt The updated at time of the cargo door motor
	UpdatedAt time.Time `json:"updatedAt"`
}

// CargoLiftConfig defines model for CargoLiftConfig.
type CargoLiftConfig struct {
	// StableReadCount The number of stable reads required to consider the lift position reached
	StableReadCount uint8 `json:"stableReadCount"`
}

// CargoLiftInputs defines model for CargoLiftInputs.
type CargoLiftInputs struct {
	// Position The position to lift the cargo
	Position uint16 `json:"position"`

	// MotorSpeed The speed of the motor
	MotorSpeed MotorSpeed `json:"motorSpeed"`
}

// CargoLiftOutputs defines model for CargoLiftOutputs.
type CargoLiftOutputs = map[string]interface{}

// CargoLowerConfig defines model for CargoLowerConfig.
type CargoLowerConfig struct {
	// StableReadCount The number of stable reads required to consider the lower position reached
	StableReadCount        uint8            `json:"stableReadCount"`
	BottomObstacleTracking ObstacleTracking `json:"bottomObstacleTracking"`
}

// CargoLowerInputs defines model for CargoLowerInputs.
type CargoLowerInputs struct {
	// Position The position to lower the cargo
	Position uint16 `json:"position"`

	// BottomObstacleTracking This field is deprecated and will be removed in the future, use command config instead
	// Deprecated:
	BottomObstacleTracking *BottomObstacleTracking `json:"bottomObstacleTracking,omitempty"`

	// MotorSpeed The speed of the motor
	MotorSpeed MotorSpeed `json:"motorSpeed"`
}

// CargoLowerOutputs defines model for CargoLowerOutputs.
type CargoLowerOutputs = map[string]interface{}

// CargoOpenInputs defines model for CargoOpenInputs.
type CargoOpenInputs struct {
	// MotorSpeed The speed of the motor
	MotorSpeed MotorSpeed `json:"motorSpeed"`
}

// CargoOpenOutputs defines model for CargoOpenOutputs.
type CargoOpenOutputs = map[string]interface{}

// CargoState defines model for CargoState.
type CargoState struct {
	// IsOpen Whether the cargo is open
	IsOpen bool `json:"isOpen"`

	// QrCode The QR code read from the cargo QR scanner
	QrCode string `json:"qrCode"`

	// BottomDistance The bottom distance of the cargo
	BottomDistance uint16 `json:"bottomDistance"`

	// HasItem Whether the cargo has an item
	HasItem bool `json:"hasItem"`

	// UpdatedAt The updated at time of the cargo
	UpdatedAt time.Time `json:"updatedAt"`
}

// ChargeState defines model for ChargeState.
type ChargeState struct {
	// CurrentLimit The current limit of the charge
	CurrentLimit uint16 `json:"currentLimit"`

	// Enabled Whether the charge is enabled
	Enabled bool `json:"enabled"`

	// UpdatedAt The updated at time of the charge
	UpdatedAt time.Time `json:"updatedAt"`
}

// CloudConfig defines model for CloudConfig.
type CloudConfig struct {
	// Enable Whether to enable the cloud service
	Enable bool `json:"enable"`

	// Address The address for the cloud service
	Address string `json:"address"`

	// Token The token for the cloud service
	Token string `json:"token"`
}

// CloudConnection defines model for CloudConnection.
type CloudConnection struct {
	Connected       bool       `json:"connected"`
	LastConnectedAt *time.Time `json:"lastConnectedAt"`

	// Uptime The uptime of the cloud connection in seconds
	Uptime float32 `json:"uptime"`
	Error  *string `json:"error"`
}

// CommandConfig defines model for CommandConfig.
type CommandConfig struct {
	CargoLift  CargoLiftConfig  `json:"cargoLift"`
	CargoLower CargoLowerConfig `json:"cargoLower"`
}

// CommandInputs defines model for CommandInputs.
type CommandInputs struct {
	union json.RawMessage
}

// CommandOutputs defines model for CommandOutputs.
type CommandOutputs struct {
	union json.RawMessage
}

// CommandResponse defines model for CommandResponse.
type CommandResponse struct {
	// Id The id of the command
	Id int `json:"id"`

	// Type The type of command
	Type CommandType `json:"type"`

	// Status The status of the command
	Status CommandStatus `json:"status"`

	// Source The source of the command
	Source  CommandSource  `json:"source"`
	Inputs  CommandInputs  `json:"inputs"`
	Outputs CommandOutputs `json:"outputs"`

	// Error The error of the command
	Error *string `json:"error"`

	// StartedAt The start date of the command
	StartedAt *time.Time `json:"startedAt"`

	// CompletedAt The completion date of the command
	CompletedAt *time.Time `json:"completedAt"`

	// CreatedAt The creation date of the command
	CreatedAt time.Time `json:"createdAt"`

	// UpdatedAt The update date of the command
	UpdatedAt time.Time `json:"updatedAt"`
}

// CommandSource The source of the command
type CommandSource = string

// CommandStatus The status of the command
type CommandStatus = string

// CommandType The type of command
type CommandType = string

// CommandsListResponse defines model for CommandsListResponse.
type CommandsListResponse struct {
	// Items The list of commands
	Items []CommandResponse `json:"items"`

	// TotalItems The total number of commands
	TotalItems int `json:"totalItems"`
}

// CreateCommandRequest defines model for CreateCommandRequest.
type CreateCommandRequest struct {
	// Type The type of command
	Type   CommandType   `json:"type"`
	Inputs CommandInputs `json:"inputs"`
}

// DischargeState defines model for DischargeState.
type DischargeState struct {
	// CurrentLimit The current limit of the discharge
	CurrentLimit uint16 `json:"currentLimit"`

	// Enabled Whether the discharge is enabled
	Enabled bool `json:"enabled"`

	// UpdatedAt The updated at time of the discharge
	UpdatedAt time.Time `json:"updatedAt"`
}

// DistanceSensorState defines model for DistanceSensorState.
type DistanceSensorState struct {
	// FrontDistance The front distance of the distance sensor
	FrontDistance uint16 `json:"frontDistance"`

	// BackDistance The back distance of the distance sensor
	BackDistance uint16 `json:"backDistance"`

	// DownDistance The down distance of the distance sensor
	DownDistance uint16 `json:"downDistance"`

	// UpdatedAt The updated at time of the distance sensor
	UpdatedAt time.Time `json:"updatedAt"`
}

// DriveMotorState defines model for DriveMotorState.
type DriveMotorState struct {
	// Direction The direction of the drive motor
	Direction string `json:"direction"`

	// Speed The speed of the drive motor (0-100)
	Speed uint8 `json:"speed"`

	// IsRunning Whether the drive motor is running
	IsRunning bool `json:"isRunning"`

	// Enabled Whether the drive motor is enabled
	Enabled bool `json:"enabled"`

	// UpdatedAt The updated at time of the drive motor
	UpdatedAt time.Time `json:"updatedAt"`
}

// ESPConfig defines model for ESPConfig.
type ESPConfig struct {
	Serial SerialConfig `json:"serial"`

	// EnableAck Whether to enable the command ACK
	EnableAck bool `json:"enableAck"`

	// CommandAckTimeout The timeout for the command ACK in milliseconds
	CommandAckTimeout int `json:"commandAckTimeout"`
}

// ESPSerialConnection defines model for ESPSerialConnection.
type ESPSerialConnection struct {
	Connected       bool       `json:"connected"`
	LastConnectedAt *time.Time `json:"lastConnectedAt"`
	Error           *string    `json:"error"`
}

// ErrorCodeResponse defines model for ErrorCodeResponse.
type ErrorCodeResponse struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code custom raybot error code
	Code string `json:"code"`

	// Message custom raybot error message
	Message string        `json:"message"`
	Details *[]FieldError `json:"details,omitempty"`
}

// FieldError defines model for FieldError.
type FieldError struct {
	// Field field name
	Field string `json:"field"`

	// Message error message
	Message string `json:"message"`
}

// HTTPConfig defines model for HTTPConfig.
type HTTPConfig struct {
	// Port The port for the HTTP server
	Port int `json:"port"`

	// Swagger Whether to enable the Swagger UI
	Swagger bool `json:"swagger"`
}

// HardwareConfig defines model for HardwareConfig.
type HardwareConfig struct {
	Esp ESPConfig `json:"esp"`
	Pic PICConfig `json:"pic"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	// Status The status of the health check
	Status string `json:"status"`
}

// Led defines model for Led.
type Led struct {
	Connection LedConnection `json:"connection"`
	State      LedState      `json:"state"`
}

// LedConnection defines model for LedConnection.
type LedConnection struct {
	// Connected Whether the led is connected
	Connected bool `json:"connected"`

	// LastConnectedAt The last connected at time of the led
	LastConnectedAt *time.Time `json:"lastConnectedAt"`

	// Error The error message of the led
	Error *string `json:"error"`
}

// LedMode The mode of the led
type LedMode = string

// LedState defines model for LedState.
type LedState struct {
	// Mode The mode of the led
	Mode LedMode `json:"mode"`

	// UpdatedAt The updated at time of the led
	UpdatedAt time.Time `json:"updatedAt"`
}

// LiftMotorState defines model for LiftMotorState.
type LiftMotorState struct {
	// CurrentPosition The current position of the lift motor
	CurrentPosition uint16 `json:"currentPosition"`

	// TargetPosition The target position of the lift motor
	TargetPosition uint16 `json:"targetPosition"`

	// IsRunning Whether the lift motor is running
	IsRunning bool `json:"isRunning"`

	// Enabled Whether the lift motor is enabled
	Enabled bool `json:"enabled"`

	// UpdatedAt The updated at time of the lift motor
	UpdatedAt time.Time `json:"updatedAt"`
}

// LimitSwitch defines model for LimitSwitch.
type LimitSwitch struct {
	// Pressed Whether the limit switch is pressed
	Pressed bool `json:"pressed"`

	// UpdatedAt The updated at time of the limit switch
	UpdatedAt time.Time `json:"updatedAt"`
}

// LimitSwitchState defines model for LimitSwitchState.
type LimitSwitchState struct {
	LimitSwitch1 LimitSwitch `json:"limitSwitch1"`
}

// Location defines model for Location.
type Location struct {
	// Location The location (RFID tag)
	Location string `json:"location"`

	// ScannedAt The date and time when the location was scanned
	ScannedAt time.Time `json:"scannedAt"`
}

// LocationState defines model for LocationState.
type LocationState struct {
	// CurrentLocation The current location of the robot
	CurrentLocation string `json:"currentLocation"`

	// UpdatedAt The updated at time of the location
	UpdatedAt time.Time `json:"updatedAt"`
}

// LogConfig defines model for LogConfig.
type LogConfig struct {
	File    LogFileHandler    `json:"file"`
	Console LogConsoleHandler `json:"console"`
}

// LogConsoleHandler defines model for LogConsoleHandler.
type LogConsoleHandler struct {
	// Enable Whether to enable the console log
	Enable bool `json:"enable"`

	// Level The global log level for the application
	Level string `json:"level"`

	// Format The log format for the application
	Format string `json:"format"`
}

// LogFileHandler defines model for LogFileHandler.
type LogFileHandler struct {
	// Enable Whether to enable the file log
	Enable bool `json:"enable"`

	// Path The path to the file log
	Path string `json:"path"`

	// RotationCount The number of log files to keep
	RotationCount int `json:"rotationCount"`

	// Level The global log level for the application
	Level string `json:"level"`

	// Format The log format for the application
	Format string `json:"format"`
}

// MotorSpeed The speed of the motor
type MotorSpeed = uint8

// MoveBackwardInputs defines model for MoveBackwardInputs.
type MoveBackwardInputs struct {
	// MotorSpeed The speed of the motor
	MotorSpeed MotorSpeed `json:"motorSpeed"`
}

// MoveBackwardOutputs defines model for MoveBackwardOutputs.
type MoveBackwardOutputs = map[string]interface{}

// MoveDirection The direction when moving
type MoveDirection = string

// MoveForwardInputs defines model for MoveForwardInputs.
type MoveForwardInputs struct {
	// MotorSpeed The speed of the motor
	MotorSpeed MotorSpeed `json:"motorSpeed"`
}

// MoveForwardOutputs defines model for MoveForwardOutputs.
type MoveForwardOutputs = map[string]interface{}

// MoveToInputs defines model for MoveToInputs.
type MoveToInputs struct {
	// Direction The direction when moving
	Direction MoveDirection `json:"direction"`

	// Location The location to move to
	Location string `json:"location"`

	// MotorSpeed The speed of the motor
	MotorSpeed MotorSpeed `json:"motorSpeed"`
}

// MoveToOutputs defines model for MoveToOutputs.
type MoveToOutputs = map[string]interface{}

// ObstacleTracking defines model for ObstacleTracking.
type ObstacleTracking struct {
	// EnterDistance The distance to consider the obstacle present (cm)
	EnterDistance uint16 `json:"enterDistance"`

	// ExitDistance The distance to consider the obstacle cleared (cm)
	ExitDistance uint16 `json:"exitDistance"`
}

// PICConfig defines model for PICConfig.
type PICConfig struct {
	Serial SerialConfig `json:"serial"`

	// EnableAck Whether to enable the command ACK
	EnableAck bool `json:"enableAck"`

	// CommandAckTimeout The timeout for the command ACK in milliseconds
	CommandAckTimeout int `json:"commandAckTimeout"`
}

// PICSerialConnection defines model for PICSerialConnection.
type PICSerialConnection struct {
	Connected       bool       `json:"connected"`
	LastConnectedAt *time.Time `json:"lastConnectedAt"`
	Error           *string    `json:"error"`
}

// RFIDUSBConnection defines model for RFIDUSBConnection.
type RFIDUSBConnection struct {
	Connected       bool       `json:"connected"`
	LastConnectedAt *time.Time `json:"lastConnectedAt"`
	Error           *string    `json:"error"`
}

// RobotStateResponse defines model for RobotStateResponse.
type RobotStateResponse struct {
	Battery        BatteryState        `json:"battery"`
	Charge         ChargeState         `json:"charge"`
	Discharge      DischargeState      `json:"discharge"`
	DistanceSensor DistanceSensorState `json:"distanceSensor"`
	LiftMotor      LiftMotorState      `json:"liftMotor"`
	DriveMotor     DriveMotorState     `json:"driveMotor"`
	Location       LocationState       `json:"location"`
	Cargo          CargoState          `json:"cargo"`
	CargoDoorMotor CargoDoorMotorState `json:"cargoDoorMotor"`
	AppConnection  AppConnection       `json:"appConnection"`
	Leds           struct {
		AlertLed  Led `json:"alertLed"`
		SystemLed Led `json:"systemLed"`
	} `json:"leds"`
}

// STAConfig defines model for STAConfig.
type STAConfig struct {
	// Enable Whether to enable the STA mode
	Enable bool `json:"enable"`

	// Ssid The SSID for the wifi connection
	Ssid string `json:"ssid"`

	// Password The password for the wifi connection
	Password string `json:"password"`

	// Ip The IP address for the wifi connection
	Ip string `json:"ip"`
}

// ScanLocationInputs defines model for ScanLocationInputs.
type ScanLocationInputs = map[string]interface{}

// ScanLocationOutputs defines model for ScanLocationOutputs.
type ScanLocationOutputs struct {
	Locations []Location `json:"locations"`
}

// SerialConfig defines model for SerialConfig.
type SerialConfig struct {
	// Port The port name for the serial connection
	Port string `json:"port"`

	// BaudRate The baud rate for the serial connection
	BaudRate int `json:"baudRate"`

	// DataBits The data bits for the serial connection
	DataBits int `json:"dataBits"`

	// StopBits The stop bits for the serial connection
	StopBits float64 `json:"stopBits"`

	// Parity The parity for the serial connection
	Parity string `json:"parity"`

	// ReadTimeout The read timeout for the serial connection in seconds
	ReadTimeout int `json:"readTimeout"`
}

// SerialPort defines model for SerialPort.
type SerialPort struct {
	// Port The port of the serial port
	Port string `json:"port"`
}

// SerialPortListResponse defines model for SerialPortListResponse.
type SerialPortListResponse struct {
	// Items The list of serial ports
	Items []SerialPort `json:"items"`
}

// StopInputs defines model for StopInputs.
type StopInputs = map[string]interface{}

// StopOutputs defines model for StopOutputs.
type StopOutputs = map[string]interface{}

// SystemInfo defines model for SystemInfo.
type SystemInfo struct {
	// LocalIp The local IP address of the system
	LocalIp string `json:"localIp"`

	// CpuUsage The CPU usage of the system in percentage
	CpuUsage float32 `json:"cpuUsage"`

	// MemoryUsage The memory usage of the system in percentage
	MemoryUsage float32 `json:"memoryUsage"`

	// TotalMemory The total memory of the system in MB
	TotalMemory float32 `json:"totalMemory"`

	// Uptime The uptime of the system in seconds
	Uptime float32 `json:"uptime"`
}

// SystemStatus defines model for SystemStatus.
type SystemStatus struct {
	// Status The status of the system
	Status string `json:"status"`
}

// Version defines model for Version.
type Version struct {
	BuildDate string `json:"buildDate"`
	GoVersion string `json:"goVersion"`
	Version   string `json:"version"`
}

// WaitInputs defines model for WaitInputs.
type WaitInputs struct {
	// DurationMs The duration in milliseconds
	DurationMs int `json:"durationMs"`
}

// WaitOutputs defines model for WaitOutputs.
type WaitOutputs = map[string]interface{}

// WifiConfig defines model for WifiConfig.
type WifiConfig struct {
	Ap  APConfig  `json:"ap"`
	Sta STAConfig `json:"sta"`
}

// Page defines model for Page.
type Page = uint

// PageSize defines model for PageSize.
type PageSize = uint

// ListCommandsParams defines parameters for ListCommands.
type ListCommandsParams struct {
	// Page The page number
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The number of items per page
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Sorts Sort the commands by the given field. Use `-` to sort in descending order. Use `,` to sort by multiple fields. Example: `-created_at,status` Allowed fields:
	//   - type
	//   - status
	//   - source
	//   - created_at
	//   - updated_at
	//   - completed_at
	Sorts *string `form:"sorts,omitempty" json:"sorts,omitempty"`

	// Statuses Filter the commands by the given statuses. Use `,` to filter by multiple statuses. Example: `QUEUED,PROCESSING` Allowed values:
	//   - QUEUED
	//   - PROCESSING
	//   - SUCCEEDED
	//   - FAILED
	//   - CANCELED
	Statuses *string `form:"statuses,omitempty" json:"statuses,omitempty"`
}

// CreateCommandJSONRequestBody defines body for CreateCommand for application/json ContentType.
type CreateCommandJSONRequestBody = CreateCommandRequest

// UpdateCloudConfigJSONRequestBody defines body for UpdateCloudConfig for application/json ContentType.
type UpdateCloudConfigJSONRequestBody = CloudConfig

// UpdateCommandConfigJSONRequestBody defines body for UpdateCommandConfig for application/json ContentType.
type UpdateCommandConfigJSONRequestBody = CommandConfig

// UpdateHardwareConfigJSONRequestBody defines body for UpdateHardwareConfig for application/json ContentType.
type UpdateHardwareConfigJSONRequestBody = HardwareConfig

// UpdateHTTPConfigJSONRequestBody defines body for UpdateHTTPConfig for application/json ContentType.
type UpdateHTTPConfigJSONRequestBody = HTTPConfig

// UpdateLogConfigJSONRequestBody defines body for UpdateLogConfig for application/json ContentType.
type UpdateLogConfigJSONRequestBody = LogConfig

// UpdateWifiConfigJSONRequestBody defines body for UpdateWifiConfig for application/json ContentType.
type UpdateWifiConfigJSONRequestBody = WifiConfig

// AsStopInputs returns the union data inside the CommandInputs as a StopInputs
func (t CommandInputs) AsStopInputs() (StopInputs, error) {
	var body StopInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStopInputs overwrites any union data inside the CommandInputs as the provided StopInputs
func (t *CommandInputs) FromStopInputs(v StopInputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStopInputs performs a merge with any union data inside the CommandInputs, using the provided StopInputs
func (t *CommandInputs) MergeStopInputs(v StopInputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMoveForwardInputs returns the union data inside the CommandInputs as a MoveForwardInputs
func (t CommandInputs) AsMoveForwardInputs() (MoveForwardInputs, error) {
	var body MoveForwardInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMoveForwardInputs overwrites any union data inside the CommandInputs as the provided MoveForwardInputs
func (t *CommandInputs) FromMoveForwardInputs(v MoveForwardInputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMoveForwardInputs performs a merge with any union data inside the CommandInputs, using the provided MoveForwardInputs
func (t *CommandInputs) MergeMoveForwardInputs(v MoveForwardInputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMoveBackwardInputs returns the union data inside the CommandInputs as a MoveBackwardInputs
func (t CommandInputs) AsMoveBackwardInputs() (MoveBackwardInputs, error) {
	var body MoveBackwardInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMoveBackwardInputs overwrites any union data inside the CommandInputs as the provided MoveBackwardInputs
func (t *CommandInputs) FromMoveBackwardInputs(v MoveBackwardInputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMoveBackwardInputs performs a merge with any union data inside the CommandInputs, using the provided MoveBackwardInputs
func (t *CommandInputs) MergeMoveBackwardInputs(v MoveBackwardInputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMoveToInputs returns the union data inside the CommandInputs as a MoveToInputs
func (t CommandInputs) AsMoveToInputs() (MoveToInputs, error) {
	var body MoveToInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMoveToInputs overwrites any union data inside the CommandInputs as the provided MoveToInputs
func (t *CommandInputs) FromMoveToInputs(v MoveToInputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMoveToInputs performs a merge with any union data inside the CommandInputs, using the provided MoveToInputs
func (t *CommandInputs) MergeMoveToInputs(v MoveToInputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCargoOpenInputs returns the union data inside the CommandInputs as a CargoOpenInputs
func (t CommandInputs) AsCargoOpenInputs() (CargoOpenInputs, error) {
	var body CargoOpenInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCargoOpenInputs overwrites any union data inside the CommandInputs as the provided CargoOpenInputs
func (t *CommandInputs) FromCargoOpenInputs(v CargoOpenInputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCargoOpenInputs performs a merge with any union data inside the CommandInputs, using the provided CargoOpenInputs
func (t *CommandInputs) MergeCargoOpenInputs(v CargoOpenInputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCargoCloseInputs returns the union data inside the CommandInputs as a CargoCloseInputs
func (t CommandInputs) AsCargoCloseInputs() (CargoCloseInputs, error) {
	var body CargoCloseInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCargoCloseInputs overwrites any union data inside the CommandInputs as the provided CargoCloseInputs
func (t *CommandInputs) FromCargoCloseInputs(v CargoCloseInputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCargoCloseInputs performs a merge with any union data inside the CommandInputs, using the provided CargoCloseInputs
func (t *CommandInputs) MergeCargoCloseInputs(v CargoCloseInputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCargoLiftInputs returns the union data inside the CommandInputs as a CargoLiftInputs
func (t CommandInputs) AsCargoLiftInputs() (CargoLiftInputs, error) {
	var body CargoLiftInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCargoLiftInputs overwrites any union data inside the CommandInputs as the provided CargoLiftInputs
func (t *CommandInputs) FromCargoLiftInputs(v CargoLiftInputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCargoLiftInputs performs a merge with any union data inside the CommandInputs, using the provided CargoLiftInputs
func (t *CommandInputs) MergeCargoLiftInputs(v CargoLiftInputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCargoLowerInputs returns the union data inside the CommandInputs as a CargoLowerInputs
func (t CommandInputs) AsCargoLowerInputs() (CargoLowerInputs, error) {
	var body CargoLowerInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCargoLowerInputs overwrites any union data inside the CommandInputs as the provided CargoLowerInputs
func (t *CommandInputs) FromCargoLowerInputs(v CargoLowerInputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCargoLowerInputs performs a merge with any union data inside the CommandInputs, using the provided CargoLowerInputs
func (t *CommandInputs) MergeCargoLowerInputs(v CargoLowerInputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCargoCheckQRInputs returns the union data inside the CommandInputs as a CargoCheckQRInputs
func (t CommandInputs) AsCargoCheckQRInputs() (CargoCheckQRInputs, error) {
	var body CargoCheckQRInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCargoCheckQRInputs overwrites any union data inside the CommandInputs as the provided CargoCheckQRInputs
func (t *CommandInputs) FromCargoCheckQRInputs(v CargoCheckQRInputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCargoCheckQRInputs performs a merge with any union data inside the CommandInputs, using the provided CargoCheckQRInputs
func (t *CommandInputs) MergeCargoCheckQRInputs(v CargoCheckQRInputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsScanLocationInputs returns the union data inside the CommandInputs as a ScanLocationInputs
func (t CommandInputs) AsScanLocationInputs() (ScanLocationInputs, error) {
	var body ScanLocationInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromScanLocationInputs overwrites any union data inside the CommandInputs as the provided ScanLocationInputs
func (t *CommandInputs) FromScanLocationInputs(v ScanLocationInputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeScanLocationInputs performs a merge with any union data inside the CommandInputs, using the provided ScanLocationInputs
func (t *CommandInputs) MergeScanLocationInputs(v ScanLocationInputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWaitInputs returns the union data inside the CommandInputs as a WaitInputs
func (t CommandInputs) AsWaitInputs() (WaitInputs, error) {
	var body WaitInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWaitInputs overwrites any union data inside the CommandInputs as the provided WaitInputs
func (t *CommandInputs) FromWaitInputs(v WaitInputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWaitInputs performs a merge with any union data inside the CommandInputs, using the provided WaitInputs
func (t *CommandInputs) MergeWaitInputs(v WaitInputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CommandInputs) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CommandInputs) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStopOutputs returns the union data inside the CommandOutputs as a StopOutputs
func (t CommandOutputs) AsStopOutputs() (StopOutputs, error) {
	var body StopOutputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStopOutputs overwrites any union data inside the CommandOutputs as the provided StopOutputs
func (t *CommandOutputs) FromStopOutputs(v StopOutputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStopOutputs performs a merge with any union data inside the CommandOutputs, using the provided StopOutputs
func (t *CommandOutputs) MergeStopOutputs(v StopOutputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMoveForwardOutputs returns the union data inside the CommandOutputs as a MoveForwardOutputs
func (t CommandOutputs) AsMoveForwardOutputs() (MoveForwardOutputs, error) {
	var body MoveForwardOutputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMoveForwardOutputs overwrites any union data inside the CommandOutputs as the provided MoveForwardOutputs
func (t *CommandOutputs) FromMoveForwardOutputs(v MoveForwardOutputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMoveForwardOutputs performs a merge with any union data inside the CommandOutputs, using the provided MoveForwardOutputs
func (t *CommandOutputs) MergeMoveForwardOutputs(v MoveForwardOutputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMoveBackwardOutputs returns the union data inside the CommandOutputs as a MoveBackwardOutputs
func (t CommandOutputs) AsMoveBackwardOutputs() (MoveBackwardOutputs, error) {
	var body MoveBackwardOutputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMoveBackwardOutputs overwrites any union data inside the CommandOutputs as the provided MoveBackwardOutputs
func (t *CommandOutputs) FromMoveBackwardOutputs(v MoveBackwardOutputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMoveBackwardOutputs performs a merge with any union data inside the CommandOutputs, using the provided MoveBackwardOutputs
func (t *CommandOutputs) MergeMoveBackwardOutputs(v MoveBackwardOutputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMoveToOutputs returns the union data inside the CommandOutputs as a MoveToOutputs
func (t CommandOutputs) AsMoveToOutputs() (MoveToOutputs, error) {
	var body MoveToOutputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMoveToOutputs overwrites any union data inside the CommandOutputs as the provided MoveToOutputs
func (t *CommandOutputs) FromMoveToOutputs(v MoveToOutputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMoveToOutputs performs a merge with any union data inside the CommandOutputs, using the provided MoveToOutputs
func (t *CommandOutputs) MergeMoveToOutputs(v MoveToOutputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCargoOpenOutputs returns the union data inside the CommandOutputs as a CargoOpenOutputs
func (t CommandOutputs) AsCargoOpenOutputs() (CargoOpenOutputs, error) {
	var body CargoOpenOutputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCargoOpenOutputs overwrites any union data inside the CommandOutputs as the provided CargoOpenOutputs
func (t *CommandOutputs) FromCargoOpenOutputs(v CargoOpenOutputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCargoOpenOutputs performs a merge with any union data inside the CommandOutputs, using the provided CargoOpenOutputs
func (t *CommandOutputs) MergeCargoOpenOutputs(v CargoOpenOutputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCargoCloseOutputs returns the union data inside the CommandOutputs as a CargoCloseOutputs
func (t CommandOutputs) AsCargoCloseOutputs() (CargoCloseOutputs, error) {
	var body CargoCloseOutputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCargoCloseOutputs overwrites any union data inside the CommandOutputs as the provided CargoCloseOutputs
func (t *CommandOutputs) FromCargoCloseOutputs(v CargoCloseOutputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCargoCloseOutputs performs a merge with any union data inside the CommandOutputs, using the provided CargoCloseOutputs
func (t *CommandOutputs) MergeCargoCloseOutputs(v CargoCloseOutputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCargoLiftOutputs returns the union data inside the CommandOutputs as a CargoLiftOutputs
func (t CommandOutputs) AsCargoLiftOutputs() (CargoLiftOutputs, error) {
	var body CargoLiftOutputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCargoLiftOutputs overwrites any union data inside the CommandOutputs as the provided CargoLiftOutputs
func (t *CommandOutputs) FromCargoLiftOutputs(v CargoLiftOutputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCargoLiftOutputs performs a merge with any union data inside the CommandOutputs, using the provided CargoLiftOutputs
func (t *CommandOutputs) MergeCargoLiftOutputs(v CargoLiftOutputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCargoLowerOutputs returns the union data inside the CommandOutputs as a CargoLowerOutputs
func (t CommandOutputs) AsCargoLowerOutputs() (CargoLowerOutputs, error) {
	var body CargoLowerOutputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCargoLowerOutputs overwrites any union data inside the CommandOutputs as the provided CargoLowerOutputs
func (t *CommandOutputs) FromCargoLowerOutputs(v CargoLowerOutputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCargoLowerOutputs performs a merge with any union data inside the CommandOutputs, using the provided CargoLowerOutputs
func (t *CommandOutputs) MergeCargoLowerOutputs(v CargoLowerOutputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCargoCheckQROutputs returns the union data inside the CommandOutputs as a CargoCheckQROutputs
func (t CommandOutputs) AsCargoCheckQROutputs() (CargoCheckQROutputs, error) {
	var body CargoCheckQROutputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCargoCheckQROutputs overwrites any union data inside the CommandOutputs as the provided CargoCheckQROutputs
func (t *CommandOutputs) FromCargoCheckQROutputs(v CargoCheckQROutputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCargoCheckQROutputs performs a merge with any union data inside the CommandOutputs, using the provided CargoCheckQROutputs
func (t *CommandOutputs) MergeCargoCheckQROutputs(v CargoCheckQROutputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsScanLocationOutputs returns the union data inside the CommandOutputs as a ScanLocationOutputs
func (t CommandOutputs) AsScanLocationOutputs() (ScanLocationOutputs, error) {
	var body ScanLocationOutputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromScanLocationOutputs overwrites any union data inside the CommandOutputs as the provided ScanLocationOutputs
func (t *CommandOutputs) FromScanLocationOutputs(v ScanLocationOutputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeScanLocationOutputs performs a merge with any union data inside the CommandOutputs, using the provided ScanLocationOutputs
func (t *CommandOutputs) MergeScanLocationOutputs(v ScanLocationOutputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWaitOutputs returns the union data inside the CommandOutputs as a WaitOutputs
func (t CommandOutputs) AsWaitOutputs() (WaitOutputs, error) {
	var body WaitOutputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWaitOutputs overwrites any union data inside the CommandOutputs as the provided WaitOutputs
func (t *CommandOutputs) FromWaitOutputs(v WaitOutputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWaitOutputs performs a merge with any union data inside the CommandOutputs, using the provided WaitOutputs
func (t *CommandOutputs) MergeWaitOutputs(v WaitOutputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CommandOutputs) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CommandOutputs) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all commands
	// (GET /commands)
	ListCommands(w http.ResponseWriter, r *http.Request, params ListCommandsParams)
	// Create a command
	// (POST /commands)
	CreateCommand(w http.ResponseWriter, r *http.Request)
	// Get current processing command
	// (GET /commands/processing)
	GetCurrentProcessingCommand(w http.ResponseWriter, r *http.Request)
	// Cancel current processing command
	// (POST /commands/processing/cancel)
	CancelCurrentProcessingCommand(w http.ResponseWriter, r *http.Request)
	// Delete a command by ID
	// (DELETE /commands/{commandId})
	DeleteCommandById(w http.ResponseWriter, r *http.Request, commandId int)
	// Get a command by ID
	// (GET /commands/{commandId})
	GetCommandById(w http.ResponseWriter, r *http.Request, commandId int)
	// Get the cloud configuration
	// (GET /configs/cloud)
	GetCloudConfig(w http.ResponseWriter, r *http.Request)
	// Update the cloud configuration
	// (PUT /configs/cloud)
	UpdateCloudConfig(w http.ResponseWriter, r *http.Request)
	// Get the command configuration
	// (GET /configs/command)
	GetCommandConfig(w http.ResponseWriter, r *http.Request)
	// Update the command configuration
	// (PUT /configs/command)
	UpdateCommandConfig(w http.ResponseWriter, r *http.Request)
	// Get the hardware configuration
	// (GET /configs/hardware)
	GetHardwareConfig(w http.ResponseWriter, r *http.Request)
	// Update the hardware configuration
	// (PUT /configs/hardware)
	UpdateHardwareConfig(w http.ResponseWriter, r *http.Request)
	// Get the HTTP configuration
	// (GET /configs/http)
	GetHTTPConfig(w http.ResponseWriter, r *http.Request)
	// Update the HTTP configuration
	// (PUT /configs/http)
	UpdateHTTPConfig(w http.ResponseWriter, r *http.Request)
	// Get the log configuration
	// (GET /configs/log)
	GetLogConfig(w http.ResponseWriter, r *http.Request)
	// Update the log configuration
	// (PUT /configs/log)
	UpdateLogConfig(w http.ResponseWriter, r *http.Request)
	// Get the wifi configuration
	// (GET /configs/wifi)
	GetWifiConfig(w http.ResponseWriter, r *http.Request)
	// Update the wifi configuration
	// (PUT /configs/wifi)
	UpdateWifiConfig(w http.ResponseWriter, r *http.Request)
	// Get all error codes
	// (GET /error-codes)
	GetErrorCodes(w http.ResponseWriter, r *http.Request)
	// Get the health of the server
	// (GET /health)
	GetHealth(w http.ResponseWriter, r *http.Request)
	// List available serial ports
	// (GET /peripherals/serials)
	ListAvailableSerialPorts(w http.ResponseWriter, r *http.Request)
	// Get robot state
	// (GET /robot-state)
	GetRobotState(w http.ResponseWriter, r *http.Request)
	// Get the limit switch state
	// (GET /states/limit-switch)
	GetLimitSwitchState(w http.ResponseWriter, r *http.Request)
	// Get the system information
	// (GET /system/info)
	GetSystemInfo(w http.ResponseWriter, r *http.Request)
	// Reboot the system
	// (POST /system/reboot)
	RebootSystem(w http.ResponseWriter, r *http.Request)
	// Get the system status
	// (GET /system/status)
	GetSystemStatus(w http.ResponseWriter, r *http.Request)
	// Stop all motors and cancel all running, queued and processing commands
	// (POST /system/stop-emergency)
	StopEmergency(w http.ResponseWriter, r *http.Request)
	// Get application version information
	// (GET /version)
	GetVersion(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List all commands
// (GET /commands)
func (_ Unimplemented) ListCommands(w http.ResponseWriter, r *http.Request, params ListCommandsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a command
// (POST /commands)
func (_ Unimplemented) CreateCommand(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get current processing command
// (GET /commands/processing)
func (_ Unimplemented) GetCurrentProcessingCommand(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Cancel current processing command
// (POST /commands/processing/cancel)
func (_ Unimplemented) CancelCurrentProcessingCommand(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a command by ID
// (DELETE /commands/{commandId})
func (_ Unimplemented) DeleteCommandById(w http.ResponseWriter, r *http.Request, commandId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a command by ID
// (GET /commands/{commandId})
func (_ Unimplemented) GetCommandById(w http.ResponseWriter, r *http.Request, commandId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the cloud configuration
// (GET /configs/cloud)
func (_ Unimplemented) GetCloudConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the cloud configuration
// (PUT /configs/cloud)
func (_ Unimplemented) UpdateCloudConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the command configuration
// (GET /configs/command)
func (_ Unimplemented) GetCommandConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the command configuration
// (PUT /configs/command)
func (_ Unimplemented) UpdateCommandConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the hardware configuration
// (GET /configs/hardware)
func (_ Unimplemented) GetHardwareConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the hardware configuration
// (PUT /configs/hardware)
func (_ Unimplemented) UpdateHardwareConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the HTTP configuration
// (GET /configs/http)
func (_ Unimplemented) GetHTTPConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the HTTP configuration
// (PUT /configs/http)
func (_ Unimplemented) UpdateHTTPConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the log configuration
// (GET /configs/log)
func (_ Unimplemented) GetLogConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the log configuration
// (PUT /configs/log)
func (_ Unimplemented) UpdateLogConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the wifi configuration
// (GET /configs/wifi)
func (_ Unimplemented) GetWifiConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the wifi configuration
// (PUT /configs/wifi)
func (_ Unimplemented) UpdateWifiConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all error codes
// (GET /error-codes)
func (_ Unimplemented) GetErrorCodes(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the health of the server
// (GET /health)
func (_ Unimplemented) GetHealth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List available serial ports
// (GET /peripherals/serials)
func (_ Unimplemented) ListAvailableSerialPorts(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get robot state
// (GET /robot-state)
func (_ Unimplemented) GetRobotState(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the limit switch state
// (GET /states/limit-switch)
func (_ Unimplemented) GetLimitSwitchState(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the system information
// (GET /system/info)
func (_ Unimplemented) GetSystemInfo(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reboot the system
// (POST /system/reboot)
func (_ Unimplemented) RebootSystem(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the system status
// (GET /system/status)
func (_ Unimplemented) GetSystemStatus(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Stop all motors and cancel all running, queued and processing commands
// (POST /system/stop-emergency)
func (_ Unimplemented) StopEmergency(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get application version information
// (GET /version)
func (_ Unimplemented) GetVersion(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListCommands operation middleware
func (siw *ServerInterfaceWrapper) ListCommands(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCommandsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "sorts" -------------

	err = runtime.BindQueryParameter("form", true, false, "sorts", r.URL.Query(), &params.Sorts)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sorts", Err: err})
		return
	}

	// ------------- Optional query parameter "statuses" -------------

	err = runtime.BindQueryParameter("form", true, false, "statuses", r.URL.Query(), &params.Statuses)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "statuses", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCommands(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateCommand operation middleware
func (siw *ServerInterfaceWrapper) CreateCommand(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCommand(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCurrentProcessingCommand operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentProcessingCommand(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCurrentProcessingCommand(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CancelCurrentProcessingCommand operation middleware
func (siw *ServerInterfaceWrapper) CancelCurrentProcessingCommand(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CancelCurrentProcessingCommand(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteCommandById operation middleware
func (siw *ServerInterfaceWrapper) DeleteCommandById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "commandId" -------------
	var commandId int

	err = runtime.BindStyledParameterWithOptions("simple", "commandId", chi.URLParam(r, "commandId"), &commandId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "commandId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCommandById(w, r, commandId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCommandById operation middleware
func (siw *ServerInterfaceWrapper) GetCommandById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "commandId" -------------
	var commandId int

	err = runtime.BindStyledParameterWithOptions("simple", "commandId", chi.URLParam(r, "commandId"), &commandId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "commandId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCommandById(w, r, commandId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCloudConfig operation middleware
func (siw *ServerInterfaceWrapper) GetCloudConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCloudConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateCloudConfig operation middleware
func (siw *ServerInterfaceWrapper) UpdateCloudConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCloudConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCommandConfig operation middleware
func (siw *ServerInterfaceWrapper) GetCommandConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCommandConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateCommandConfig operation middleware
func (siw *ServerInterfaceWrapper) UpdateCommandConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCommandConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHardwareConfig operation middleware
func (siw *ServerInterfaceWrapper) GetHardwareConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHardwareConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateHardwareConfig operation middleware
func (siw *ServerInterfaceWrapper) UpdateHardwareConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateHardwareConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHTTPConfig operation middleware
func (siw *ServerInterfaceWrapper) GetHTTPConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHTTPConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateHTTPConfig operation middleware
func (siw *ServerInterfaceWrapper) UpdateHTTPConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateHTTPConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetLogConfig operation middleware
func (siw *ServerInterfaceWrapper) GetLogConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLogConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateLogConfig operation middleware
func (siw *ServerInterfaceWrapper) UpdateLogConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateLogConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWifiConfig operation middleware
func (siw *ServerInterfaceWrapper) GetWifiConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWifiConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateWifiConfig operation middleware
func (siw *ServerInterfaceWrapper) UpdateWifiConfig(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateWifiConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetErrorCodes operation middleware
func (siw *ServerInterfaceWrapper) GetErrorCodes(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetErrorCodes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListAvailableSerialPorts operation middleware
func (siw *ServerInterfaceWrapper) ListAvailableSerialPorts(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAvailableSerialPorts(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRobotState operation middleware
func (siw *ServerInterfaceWrapper) GetRobotState(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRobotState(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetLimitSwitchState operation middleware
func (siw *ServerInterfaceWrapper) GetLimitSwitchState(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLimitSwitchState(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSystemInfo operation middleware
func (siw *ServerInterfaceWrapper) GetSystemInfo(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSystemInfo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RebootSystem operation middleware
func (siw *ServerInterfaceWrapper) RebootSystem(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RebootSystem(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSystemStatus operation middleware
func (siw *ServerInterfaceWrapper) GetSystemStatus(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSystemStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// StopEmergency operation middleware
func (siw *ServerInterfaceWrapper) StopEmergency(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StopEmergency(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVersion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/commands", wrapper.ListCommands)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/commands", wrapper.CreateCommand)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/commands/processing", wrapper.GetCurrentProcessingCommand)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/commands/processing/cancel", wrapper.CancelCurrentProcessingCommand)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/commands/{commandId}", wrapper.DeleteCommandById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/commands/{commandId}", wrapper.GetCommandById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/configs/cloud", wrapper.GetCloudConfig)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/configs/cloud", wrapper.UpdateCloudConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/configs/command", wrapper.GetCommandConfig)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/configs/command", wrapper.UpdateCommandConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/configs/hardware", wrapper.GetHardwareConfig)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/configs/hardware", wrapper.UpdateHardwareConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/configs/http", wrapper.GetHTTPConfig)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/configs/http", wrapper.UpdateHTTPConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/configs/log", wrapper.GetLogConfig)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/configs/log", wrapper.UpdateLogConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/configs/wifi", wrapper.GetWifiConfig)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/configs/wifi", wrapper.UpdateWifiConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/error-codes", wrapper.GetErrorCodes)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.GetHealth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/peripherals/serials", wrapper.ListAvailableSerialPorts)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/robot-state", wrapper.GetRobotState)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/states/limit-switch", wrapper.GetLimitSwitchState)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/system/info", wrapper.GetSystemInfo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/system/reboot", wrapper.RebootSystem)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/system/status", wrapper.GetSystemStatus)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/system/stop-emergency", wrapper.StopEmergency)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/version", wrapper.GetVersion)
	})

	return r
}

type ListCommandsRequestObject struct {
	Params ListCommandsParams
}

type ListCommandsResponseObject interface {
	VisitListCommandsResponse(w http.ResponseWriter) error
}

type ListCommands200JSONResponse CommandsListResponse

func (response ListCommands200JSONResponse) VisitListCommandsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListCommands400JSONResponse ErrorResponse

func (response ListCommands400JSONResponse) VisitListCommandsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateCommandRequestObject struct {
	Body *CreateCommandJSONRequestBody
}

type CreateCommandResponseObject interface {
	VisitCreateCommandResponse(w http.ResponseWriter) error
}

type CreateCommand201JSONResponse CommandResponse

func (response CreateCommand201JSONResponse) VisitCreateCommandResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateCommand400JSONResponse ErrorResponse

func (response CreateCommand400JSONResponse) VisitCreateCommandResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentProcessingCommandRequestObject struct {
}

type GetCurrentProcessingCommandResponseObject interface {
	VisitGetCurrentProcessingCommandResponse(w http.ResponseWriter) error
}

type GetCurrentProcessingCommand200JSONResponse CommandResponse

func (response GetCurrentProcessingCommand200JSONResponse) VisitGetCurrentProcessingCommandResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentProcessingCommand404JSONResponse ErrorResponse

func (response GetCurrentProcessingCommand404JSONResponse) VisitGetCurrentProcessingCommandResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CancelCurrentProcessingCommandRequestObject struct {
}

type CancelCurrentProcessingCommandResponseObject interface {
	VisitCancelCurrentProcessingCommandResponse(w http.ResponseWriter) error
}

type CancelCurrentProcessingCommand204Response struct {
}

func (response CancelCurrentProcessingCommand204Response) VisitCancelCurrentProcessingCommandResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CancelCurrentProcessingCommand400JSONResponse ErrorResponse

func (response CancelCurrentProcessingCommand400JSONResponse) VisitCancelCurrentProcessingCommandResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCommandByIdRequestObject struct {
	CommandId int `json:"commandId"`
}

type DeleteCommandByIdResponseObject interface {
	VisitDeleteCommandByIdResponse(w http.ResponseWriter) error
}

type DeleteCommandById204Response struct {
}

func (response DeleteCommandById204Response) VisitDeleteCommandByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteCommandById400JSONResponse ErrorResponse

func (response DeleteCommandById400JSONResponse) VisitDeleteCommandByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCommandByIdRequestObject struct {
	CommandId int `json:"commandId"`
}

type GetCommandByIdResponseObject interface {
	VisitGetCommandByIdResponse(w http.ResponseWriter) error
}

type GetCommandById200JSONResponse CommandResponse

func (response GetCommandById200JSONResponse) VisitGetCommandByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCommandById404JSONResponse ErrorResponse

func (response GetCommandById404JSONResponse) VisitGetCommandByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCloudConfigRequestObject struct {
}

type GetCloudConfigResponseObject interface {
	VisitGetCloudConfigResponse(w http.ResponseWriter) error
}

type GetCloudConfig200JSONResponse CloudConfig

func (response GetCloudConfig200JSONResponse) VisitGetCloudConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCloudConfig400JSONResponse ErrorResponse

func (response GetCloudConfig400JSONResponse) VisitGetCloudConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCloudConfigRequestObject struct {
	Body *UpdateCloudConfigJSONRequestBody
}

type UpdateCloudConfigResponseObject interface {
	VisitUpdateCloudConfigResponse(w http.ResponseWriter) error
}

type UpdateCloudConfig200JSONResponse CloudConfig

func (response UpdateCloudConfig200JSONResponse) VisitUpdateCloudConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCloudConfig400JSONResponse ErrorResponse

func (response UpdateCloudConfig400JSONResponse) VisitUpdateCloudConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCommandConfigRequestObject struct {
}

type GetCommandConfigResponseObject interface {
	VisitGetCommandConfigResponse(w http.ResponseWriter) error
}

type GetCommandConfig200JSONResponse CommandConfig

func (response GetCommandConfig200JSONResponse) VisitGetCommandConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCommandConfig400JSONResponse ErrorResponse

func (response GetCommandConfig400JSONResponse) VisitGetCommandConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCommandConfigRequestObject struct {
	Body *UpdateCommandConfigJSONRequestBody
}

type UpdateCommandConfigResponseObject interface {
	VisitUpdateCommandConfigResponse(w http.ResponseWriter) error
}

type UpdateCommandConfig200JSONResponse CommandConfig

func (response UpdateCommandConfig200JSONResponse) VisitUpdateCommandConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCommandConfig400JSONResponse ErrorResponse

func (response UpdateCommandConfig400JSONResponse) VisitUpdateCommandConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetHardwareConfigRequestObject struct {
}

type GetHardwareConfigResponseObject interface {
	VisitGetHardwareConfigResponse(w http.ResponseWriter) error
}

type GetHardwareConfig200JSONResponse HardwareConfig

func (response GetHardwareConfig200JSONResponse) VisitGetHardwareConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHardwareConfig400JSONResponse ErrorResponse

func (response GetHardwareConfig400JSONResponse) VisitGetHardwareConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateHardwareConfigRequestObject struct {
	Body *UpdateHardwareConfigJSONRequestBody
}

type UpdateHardwareConfigResponseObject interface {
	VisitUpdateHardwareConfigResponse(w http.ResponseWriter) error
}

type UpdateHardwareConfig200JSONResponse HardwareConfig

func (response UpdateHardwareConfig200JSONResponse) VisitUpdateHardwareConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateHardwareConfig400JSONResponse ErrorResponse

func (response UpdateHardwareConfig400JSONResponse) VisitUpdateHardwareConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetHTTPConfigRequestObject struct {
}

type GetHTTPConfigResponseObject interface {
	VisitGetHTTPConfigResponse(w http.ResponseWriter) error
}

type GetHTTPConfig200JSONResponse HTTPConfig

func (response GetHTTPConfig200JSONResponse) VisitGetHTTPConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHTTPConfig400JSONResponse ErrorResponse

func (response GetHTTPConfig400JSONResponse) VisitGetHTTPConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateHTTPConfigRequestObject struct {
	Body *UpdateHTTPConfigJSONRequestBody
}

type UpdateHTTPConfigResponseObject interface {
	VisitUpdateHTTPConfigResponse(w http.ResponseWriter) error
}

type UpdateHTTPConfig200JSONResponse HTTPConfig

func (response UpdateHTTPConfig200JSONResponse) VisitUpdateHTTPConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateHTTPConfig400JSONResponse ErrorResponse

func (response UpdateHTTPConfig400JSONResponse) VisitUpdateHTTPConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetLogConfigRequestObject struct {
}

type GetLogConfigResponseObject interface {
	VisitGetLogConfigResponse(w http.ResponseWriter) error
}

type GetLogConfig200JSONResponse LogConfig

func (response GetLogConfig200JSONResponse) VisitGetLogConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetLogConfig400JSONResponse ErrorResponse

func (response GetLogConfig400JSONResponse) VisitGetLogConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateLogConfigRequestObject struct {
	Body *UpdateLogConfigJSONRequestBody
}

type UpdateLogConfigResponseObject interface {
	VisitUpdateLogConfigResponse(w http.ResponseWriter) error
}

type UpdateLogConfig200JSONResponse LogConfig

func (response UpdateLogConfig200JSONResponse) VisitUpdateLogConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateLogConfig400JSONResponse ErrorResponse

func (response UpdateLogConfig400JSONResponse) VisitUpdateLogConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetWifiConfigRequestObject struct {
}

type GetWifiConfigResponseObject interface {
	VisitGetWifiConfigResponse(w http.ResponseWriter) error
}

type GetWifiConfig200JSONResponse WifiConfig

func (response GetWifiConfig200JSONResponse) VisitGetWifiConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWifiConfig400JSONResponse ErrorResponse

func (response GetWifiConfig400JSONResponse) VisitGetWifiConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWifiConfigRequestObject struct {
	Body *UpdateWifiConfigJSONRequestBody
}

type UpdateWifiConfigResponseObject interface {
	VisitUpdateWifiConfigResponse(w http.ResponseWriter) error
}

type UpdateWifiConfig200JSONResponse WifiConfig

func (response UpdateWifiConfig200JSONResponse) VisitUpdateWifiConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWifiConfig400JSONResponse ErrorResponse

func (response UpdateWifiConfig400JSONResponse) VisitUpdateWifiConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetErrorCodesRequestObject struct {
}

type GetErrorCodesResponseObject interface {
	VisitGetErrorCodesResponse(w http.ResponseWriter) error
}

type GetErrorCodes200JSONResponse []ErrorCodeResponse

func (response GetErrorCodes200JSONResponse) VisitGetErrorCodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetErrorCodes400JSONResponse ErrorResponse

func (response GetErrorCodes400JSONResponse) VisitGetErrorCodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthRequestObject struct {
}

type GetHealthResponseObject interface {
	VisitGetHealthResponse(w http.ResponseWriter) error
}

type GetHealth200JSONResponse HealthResponse

func (response GetHealth200JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHealth400JSONResponse ErrorResponse

func (response GetHealth400JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListAvailableSerialPortsRequestObject struct {
}

type ListAvailableSerialPortsResponseObject interface {
	VisitListAvailableSerialPortsResponse(w http.ResponseWriter) error
}

type ListAvailableSerialPorts200JSONResponse SerialPortListResponse

func (response ListAvailableSerialPorts200JSONResponse) VisitListAvailableSerialPortsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListAvailableSerialPorts400JSONResponse ErrorResponse

func (response ListAvailableSerialPorts400JSONResponse) VisitListAvailableSerialPortsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRobotStateRequestObject struct {
}

type GetRobotStateResponseObject interface {
	VisitGetRobotStateResponse(w http.ResponseWriter) error
}

type GetRobotState200JSONResponse RobotStateResponse

func (response GetRobotState200JSONResponse) VisitGetRobotStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRobotState400JSONResponse ErrorResponse

func (response GetRobotState400JSONResponse) VisitGetRobotStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetLimitSwitchStateRequestObject struct {
}

type GetLimitSwitchStateResponseObject interface {
	VisitGetLimitSwitchStateResponse(w http.ResponseWriter) error
}

type GetLimitSwitchState200JSONResponse LimitSwitchState

func (response GetLimitSwitchState200JSONResponse) VisitGetLimitSwitchStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetLimitSwitchState400JSONResponse ErrorResponse

func (response GetLimitSwitchState400JSONResponse) VisitGetLimitSwitchStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSystemInfoRequestObject struct {
}

type GetSystemInfoResponseObject interface {
	VisitGetSystemInfoResponse(w http.ResponseWriter) error
}

type GetSystemInfo200JSONResponse SystemInfo

func (response GetSystemInfo200JSONResponse) VisitGetSystemInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSystemInfo400JSONResponse ErrorResponse

func (response GetSystemInfo400JSONResponse) VisitGetSystemInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RebootSystemRequestObject struct {
}

type RebootSystemResponseObject interface {
	VisitRebootSystemResponse(w http.ResponseWriter) error
}

type RebootSystem204Response struct {
}

func (response RebootSystem204Response) VisitRebootSystemResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RebootSystem400JSONResponse ErrorResponse

func (response RebootSystem400JSONResponse) VisitRebootSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSystemStatusRequestObject struct {
}

type GetSystemStatusResponseObject interface {
	VisitGetSystemStatusResponse(w http.ResponseWriter) error
}

type GetSystemStatus200JSONResponse SystemStatus

func (response GetSystemStatus200JSONResponse) VisitGetSystemStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSystemStatus400JSONResponse ErrorResponse

func (response GetSystemStatus400JSONResponse) VisitGetSystemStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type StopEmergencyRequestObject struct {
}

type StopEmergencyResponseObject interface {
	VisitStopEmergencyResponse(w http.ResponseWriter) error
}

type StopEmergency204Response struct {
}

func (response StopEmergency204Response) VisitStopEmergencyResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type StopEmergency400JSONResponse ErrorResponse

func (response StopEmergency400JSONResponse) VisitStopEmergencyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetVersionRequestObject struct {
}

type GetVersionResponseObject interface {
	VisitGetVersionResponse(w http.ResponseWriter) error
}

type GetVersion200JSONResponse Version

func (response GetVersion200JSONResponse) VisitGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVersion400JSONResponse ErrorResponse

func (response GetVersion400JSONResponse) VisitGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all commands
	// (GET /commands)
	ListCommands(ctx context.Context, request ListCommandsRequestObject) (ListCommandsResponseObject, error)
	// Create a command
	// (POST /commands)
	CreateCommand(ctx context.Context, request CreateCommandRequestObject) (CreateCommandResponseObject, error)
	// Get current processing command
	// (GET /commands/processing)
	GetCurrentProcessingCommand(ctx context.Context, request GetCurrentProcessingCommandRequestObject) (GetCurrentProcessingCommandResponseObject, error)
	// Cancel current processing command
	// (POST /commands/processing/cancel)
	CancelCurrentProcessingCommand(ctx context.Context, request CancelCurrentProcessingCommandRequestObject) (CancelCurrentProcessingCommandResponseObject, error)
	// Delete a command by ID
	// (DELETE /commands/{commandId})
	DeleteCommandById(ctx context.Context, request DeleteCommandByIdRequestObject) (DeleteCommandByIdResponseObject, error)
	// Get a command by ID
	// (GET /commands/{commandId})
	GetCommandById(ctx context.Context, request GetCommandByIdRequestObject) (GetCommandByIdResponseObject, error)
	// Get the cloud configuration
	// (GET /configs/cloud)
	GetCloudConfig(ctx context.Context, request GetCloudConfigRequestObject) (GetCloudConfigResponseObject, error)
	// Update the cloud configuration
	// (PUT /configs/cloud)
	UpdateCloudConfig(ctx context.Context, request UpdateCloudConfigRequestObject) (UpdateCloudConfigResponseObject, error)
	// Get the command configuration
	// (GET /configs/command)
	GetCommandConfig(ctx context.Context, request GetCommandConfigRequestObject) (GetCommandConfigResponseObject, error)
	// Update the command configuration
	// (PUT /configs/command)
	UpdateCommandConfig(ctx context.Context, request UpdateCommandConfigRequestObject) (UpdateCommandConfigResponseObject, error)
	// Get the hardware configuration
	// (GET /configs/hardware)
	GetHardwareConfig(ctx context.Context, request GetHardwareConfigRequestObject) (GetHardwareConfigResponseObject, error)
	// Update the hardware configuration
	// (PUT /configs/hardware)
	UpdateHardwareConfig(ctx context.Context, request UpdateHardwareConfigRequestObject) (UpdateHardwareConfigResponseObject, error)
	// Get the HTTP configuration
	// (GET /configs/http)
	GetHTTPConfig(ctx context.Context, request GetHTTPConfigRequestObject) (GetHTTPConfigResponseObject, error)
	// Update the HTTP configuration
	// (PUT /configs/http)
	UpdateHTTPConfig(ctx context.Context, request UpdateHTTPConfigRequestObject) (UpdateHTTPConfigResponseObject, error)
	// Get the log configuration
	// (GET /configs/log)
	GetLogConfig(ctx context.Context, request GetLogConfigRequestObject) (GetLogConfigResponseObject, error)
	// Update the log configuration
	// (PUT /configs/log)
	UpdateLogConfig(ctx context.Context, request UpdateLogConfigRequestObject) (UpdateLogConfigResponseObject, error)
	// Get the wifi configuration
	// (GET /configs/wifi)
	GetWifiConfig(ctx context.Context, request GetWifiConfigRequestObject) (GetWifiConfigResponseObject, error)
	// Update the wifi configuration
	// (PUT /configs/wifi)
	UpdateWifiConfig(ctx context.Context, request UpdateWifiConfigRequestObject) (UpdateWifiConfigResponseObject, error)
	// Get all error codes
	// (GET /error-codes)
	GetErrorCodes(ctx context.Context, request GetErrorCodesRequestObject) (GetErrorCodesResponseObject, error)
	// Get the health of the server
	// (GET /health)
	GetHealth(ctx context.Context, request GetHealthRequestObject) (GetHealthResponseObject, error)
	// List available serial ports
	// (GET /peripherals/serials)
	ListAvailableSerialPorts(ctx context.Context, request ListAvailableSerialPortsRequestObject) (ListAvailableSerialPortsResponseObject, error)
	// Get robot state
	// (GET /robot-state)
	GetRobotState(ctx context.Context, request GetRobotStateRequestObject) (GetRobotStateResponseObject, error)
	// Get the limit switch state
	// (GET /states/limit-switch)
	GetLimitSwitchState(ctx context.Context, request GetLimitSwitchStateRequestObject) (GetLimitSwitchStateResponseObject, error)
	// Get the system information
	// (GET /system/info)
	GetSystemInfo(ctx context.Context, request GetSystemInfoRequestObject) (GetSystemInfoResponseObject, error)
	// Reboot the system
	// (POST /system/reboot)
	RebootSystem(ctx context.Context, request RebootSystemRequestObject) (RebootSystemResponseObject, error)
	// Get the system status
	// (GET /system/status)
	GetSystemStatus(ctx context.Context, request GetSystemStatusRequestObject) (GetSystemStatusResponseObject, error)
	// Stop all motors and cancel all running, queued and processing commands
	// (POST /system/stop-emergency)
	StopEmergency(ctx context.Context, request StopEmergencyRequestObject) (StopEmergencyResponseObject, error)
	// Get application version information
	// (GET /version)
	GetVersion(ctx context.Context, request GetVersionRequestObject) (GetVersionResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListCommands operation middleware
func (sh *strictHandler) ListCommands(w http.ResponseWriter, r *http.Request, params ListCommandsParams) {
	var request ListCommandsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListCommands(ctx, request.(ListCommandsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListCommands")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListCommandsResponseObject); ok {
		if err := validResponse.VisitListCommandsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateCommand operation middleware
func (sh *strictHandler) CreateCommand(w http.ResponseWriter, r *http.Request) {
	var request CreateCommandRequestObject

	var body CreateCommandJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCommand(ctx, request.(CreateCommandRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCommand")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateCommandResponseObject); ok {
		if err := validResponse.VisitCreateCommandResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCurrentProcessingCommand operation middleware
func (sh *strictHandler) GetCurrentProcessingCommand(w http.ResponseWriter, r *http.Request) {
	var request GetCurrentProcessingCommandRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCurrentProcessingCommand(ctx, request.(GetCurrentProcessingCommandRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCurrentProcessingCommand")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCurrentProcessingCommandResponseObject); ok {
		if err := validResponse.VisitGetCurrentProcessingCommandResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CancelCurrentProcessingCommand operation middleware
func (sh *strictHandler) CancelCurrentProcessingCommand(w http.ResponseWriter, r *http.Request) {
	var request CancelCurrentProcessingCommandRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CancelCurrentProcessingCommand(ctx, request.(CancelCurrentProcessingCommandRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CancelCurrentProcessingCommand")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CancelCurrentProcessingCommandResponseObject); ok {
		if err := validResponse.VisitCancelCurrentProcessingCommandResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCommandById operation middleware
func (sh *strictHandler) DeleteCommandById(w http.ResponseWriter, r *http.Request, commandId int) {
	var request DeleteCommandByIdRequestObject

	request.CommandId = commandId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCommandById(ctx, request.(DeleteCommandByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCommandById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteCommandByIdResponseObject); ok {
		if err := validResponse.VisitDeleteCommandByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCommandById operation middleware
func (sh *strictHandler) GetCommandById(w http.ResponseWriter, r *http.Request, commandId int) {
	var request GetCommandByIdRequestObject

	request.CommandId = commandId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCommandById(ctx, request.(GetCommandByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCommandById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCommandByIdResponseObject); ok {
		if err := validResponse.VisitGetCommandByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCloudConfig operation middleware
func (sh *strictHandler) GetCloudConfig(w http.ResponseWriter, r *http.Request) {
	var request GetCloudConfigRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCloudConfig(ctx, request.(GetCloudConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCloudConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCloudConfigResponseObject); ok {
		if err := validResponse.VisitGetCloudConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateCloudConfig operation middleware
func (sh *strictHandler) UpdateCloudConfig(w http.ResponseWriter, r *http.Request) {
	var request UpdateCloudConfigRequestObject

	var body UpdateCloudConfigJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateCloudConfig(ctx, request.(UpdateCloudConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateCloudConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateCloudConfigResponseObject); ok {
		if err := validResponse.VisitUpdateCloudConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCommandConfig operation middleware
func (sh *strictHandler) GetCommandConfig(w http.ResponseWriter, r *http.Request) {
	var request GetCommandConfigRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCommandConfig(ctx, request.(GetCommandConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCommandConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCommandConfigResponseObject); ok {
		if err := validResponse.VisitGetCommandConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateCommandConfig operation middleware
func (sh *strictHandler) UpdateCommandConfig(w http.ResponseWriter, r *http.Request) {
	var request UpdateCommandConfigRequestObject

	var body UpdateCommandConfigJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateCommandConfig(ctx, request.(UpdateCommandConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateCommandConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateCommandConfigResponseObject); ok {
		if err := validResponse.VisitUpdateCommandConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHardwareConfig operation middleware
func (sh *strictHandler) GetHardwareConfig(w http.ResponseWriter, r *http.Request) {
	var request GetHardwareConfigRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHardwareConfig(ctx, request.(GetHardwareConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHardwareConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHardwareConfigResponseObject); ok {
		if err := validResponse.VisitGetHardwareConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateHardwareConfig operation middleware
func (sh *strictHandler) UpdateHardwareConfig(w http.ResponseWriter, r *http.Request) {
	var request UpdateHardwareConfigRequestObject

	var body UpdateHardwareConfigJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateHardwareConfig(ctx, request.(UpdateHardwareConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateHardwareConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateHardwareConfigResponseObject); ok {
		if err := validResponse.VisitUpdateHardwareConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHTTPConfig operation middleware
func (sh *strictHandler) GetHTTPConfig(w http.ResponseWriter, r *http.Request) {
	var request GetHTTPConfigRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHTTPConfig(ctx, request.(GetHTTPConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHTTPConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHTTPConfigResponseObject); ok {
		if err := validResponse.VisitGetHTTPConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateHTTPConfig operation middleware
func (sh *strictHandler) UpdateHTTPConfig(w http.ResponseWriter, r *http.Request) {
	var request UpdateHTTPConfigRequestObject

	var body UpdateHTTPConfigJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateHTTPConfig(ctx, request.(UpdateHTTPConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateHTTPConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateHTTPConfigResponseObject); ok {
		if err := validResponse.VisitUpdateHTTPConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLogConfig operation middleware
func (sh *strictHandler) GetLogConfig(w http.ResponseWriter, r *http.Request) {
	var request GetLogConfigRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetLogConfig(ctx, request.(GetLogConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLogConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetLogConfigResponseObject); ok {
		if err := validResponse.VisitGetLogConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateLogConfig operation middleware
func (sh *strictHandler) UpdateLogConfig(w http.ResponseWriter, r *http.Request) {
	var request UpdateLogConfigRequestObject

	var body UpdateLogConfigJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateLogConfig(ctx, request.(UpdateLogConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateLogConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateLogConfigResponseObject); ok {
		if err := validResponse.VisitUpdateLogConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWifiConfig operation middleware
func (sh *strictHandler) GetWifiConfig(w http.ResponseWriter, r *http.Request) {
	var request GetWifiConfigRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetWifiConfig(ctx, request.(GetWifiConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWifiConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetWifiConfigResponseObject); ok {
		if err := validResponse.VisitGetWifiConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateWifiConfig operation middleware
func (sh *strictHandler) UpdateWifiConfig(w http.ResponseWriter, r *http.Request) {
	var request UpdateWifiConfigRequestObject

	var body UpdateWifiConfigJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateWifiConfig(ctx, request.(UpdateWifiConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateWifiConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateWifiConfigResponseObject); ok {
		if err := validResponse.VisitUpdateWifiConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetErrorCodes operation middleware
func (sh *strictHandler) GetErrorCodes(w http.ResponseWriter, r *http.Request) {
	var request GetErrorCodesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetErrorCodes(ctx, request.(GetErrorCodesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetErrorCodes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetErrorCodesResponseObject); ok {
		if err := validResponse.VisitGetErrorCodesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHealth operation middleware
func (sh *strictHandler) GetHealth(w http.ResponseWriter, r *http.Request) {
	var request GetHealthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealth(ctx, request.(GetHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHealthResponseObject); ok {
		if err := validResponse.VisitGetHealthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAvailableSerialPorts operation middleware
func (sh *strictHandler) ListAvailableSerialPorts(w http.ResponseWriter, r *http.Request) {
	var request ListAvailableSerialPortsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListAvailableSerialPorts(ctx, request.(ListAvailableSerialPortsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAvailableSerialPorts")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListAvailableSerialPortsResponseObject); ok {
		if err := validResponse.VisitListAvailableSerialPortsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRobotState operation middleware
func (sh *strictHandler) GetRobotState(w http.ResponseWriter, r *http.Request) {
	var request GetRobotStateRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRobotState(ctx, request.(GetRobotStateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRobotState")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRobotStateResponseObject); ok {
		if err := validResponse.VisitGetRobotStateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLimitSwitchState operation middleware
func (sh *strictHandler) GetLimitSwitchState(w http.ResponseWriter, r *http.Request) {
	var request GetLimitSwitchStateRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetLimitSwitchState(ctx, request.(GetLimitSwitchStateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLimitSwitchState")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetLimitSwitchStateResponseObject); ok {
		if err := validResponse.VisitGetLimitSwitchStateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSystemInfo operation middleware
func (sh *strictHandler) GetSystemInfo(w http.ResponseWriter, r *http.Request) {
	var request GetSystemInfoRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSystemInfo(ctx, request.(GetSystemInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSystemInfo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSystemInfoResponseObject); ok {
		if err := validResponse.VisitGetSystemInfoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RebootSystem operation middleware
func (sh *strictHandler) RebootSystem(w http.ResponseWriter, r *http.Request) {
	var request RebootSystemRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RebootSystem(ctx, request.(RebootSystemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RebootSystem")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RebootSystemResponseObject); ok {
		if err := validResponse.VisitRebootSystemResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSystemStatus operation middleware
func (sh *strictHandler) GetSystemStatus(w http.ResponseWriter, r *http.Request) {
	var request GetSystemStatusRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSystemStatus(ctx, request.(GetSystemStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSystemStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSystemStatusResponseObject); ok {
		if err := validResponse.VisitGetSystemStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// StopEmergency operation middleware
func (sh *strictHandler) StopEmergency(w http.ResponseWriter, r *http.Request) {
	var request StopEmergencyRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.StopEmergency(ctx, request.(StopEmergencyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StopEmergency")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(StopEmergencyResponseObject); ok {
		if err := validResponse.VisitStopEmergencyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVersion operation middleware
func (sh *strictHandler) GetVersion(w http.ResponseWriter, r *http.Request) {
	var request GetVersionRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVersion(ctx, request.(GetVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVersion")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVersionResponseObject); ok {
		if err := validResponse.VisitGetVersionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
